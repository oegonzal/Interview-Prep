//First Try:
Total Runtime: 1082 ms
100% test cases passed.


public class Solution {
    /**
     * @param n: an integer
     * @return: a boolean which equals to true if the first player will win
     */
    public boolean firstWillWin(int n) {
        if(n == 0) return false;
        if(n < 3) return true;
        
        boolean[] set = new boolean[n];
        set[0] = set[1] = true;
        
        for(int i = 2; i < n; i++){
            if(set[i-1] == false || set[i-2] == false) set[i] = true;
            else set[i] = false;
        }
        return set[n-1];
    }
    
    //100, true
    
    /*
        Dynamic programming problem,
        break n down into smaller problems.
        
        So if we know a set of numbers wins, lets keep those in the winning set and for a higher number n lets see how the first pick can forcefully move th the winning set.
        
        if 2 trues in a row in front of you, set[i] = false
        
        You are trying to make your opponent land on a losing turn,
        must do this by only taking 1 or 2 stones
        
        If you make them land on a winning turn you lose
        
    */
}