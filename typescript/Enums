enum Direction {
  Up = 1,
  Down,
  Left,
  Right
}

Initializer starts at 1


enum Direction {
  Up,
  Down,
  Left,
  Right
}

Initializer starts at 0



Example:

    enum Response {
        No = 0,
        Yes = 1
    }

    function respond(recipient: string, message: Response): void {
        // ...
    }

    respond("Princess Caroline", Response.Yes);

**
The short story is, enums without initializers either need to be first, or have to come after numeric 
enums initialized with numeric constants or other constant enum members. In other words, the following isnâ€™t allowed:


Example:

    enum E {
        A = getSomeValue(),
        B // Error! Enum member must have initializer.
    }




String Enums:


enum Direction {
  Up = "UP",
  Down = "DOWN",
  Left = "LEFT",
  Right = "RIGHT"
}

**
Each member has to be constant-initialized with a string literal, or with another string enum member.



Values in Enum can have types too:


enum ShapeKind {
  Circle,
  Square
}

interface Circle {
  kind: ShapeKind.Circle;
  radius: number;
}

interface Square {
  kind: ShapeKind.Square;
  sideLength: number;
}

let c: Circle = {
  kind: ShapeKind.Square, // Error! Type 'ShapeKind.Square' is not assignable to type 'ShapeKind.Circle'.
  radius: 100
};











***
Use: keyof typeof Enum 
-   This will check type for enum key

enum LogLevel {
  ERROR,
  WARN,
  INFO,
  DEBUG
}

/**
 * This is equivalent to:
 * type LogLevelStrings = 'ERROR' | 'WARN' | 'INFO' | 'DEBUG';
 */
type LogLevelStrings = keyof typeof LogLevel;

function printImportant(key: LogLevelStrings, message: string) {
  const num = LogLevel[key];
  if (num <= LogLevel.WARN) {
    console.log("Log level key is:", key);
    console.log("Log level value is:", num);
    console.log("Log level message is:", message);
  }
}
printImportant("ERROR", "This is a message");





**
Reverse mappings
In addition to creating an object with property names for members, numeric enums members also get a reverse mapping from enum values to enum names. For example, in this example:

enum Enum {
  A
}
let a = Enum.A;
let nameOfA = Enum[a]; // "A"