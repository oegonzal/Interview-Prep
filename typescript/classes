
Example:

    class Greeter {
    greeting: string;
    constructor(message: string) {
        this.greeting = message;
    }
    greet() {
        return "Hello, " + this.greeting;
    }
    }

let greeter = new Greeter("world");
In the last line we construct an instance of the Greeter class using new. This calls into the constructor 
we defined earlier, creating a new object with the Greeter shape, and running the constructor to initialize it.


**
The keyword 'new' instantiates an object's constructor 
In typescript constructor may be protected so doing this may now work

Example:
    class Person {
        protected name: string;
        protected constructor(theName: string) {
            this.name = theName;
        }
    }

    // Employee can extend Person
    class Employee extends Person {
    private department: string;

    constructor(name: string, department: string) {
        super(name);
        this.department = department;
    }

    public getElevatorPitch() {
        return `Hello, my name is ${this.name} and I work in ${this.department}.`;
    }
    }

    let howard = new Employee("Howard", "Sales");
    let john = new Person("John"); // Error: The 'Person' constructor is protected




Readonly:

Example:
    class Octopus {
    readonly name: string;
    readonly numberOfLegs: number = 8;
    constructor(theName: string) {
        this.name = theName;
    }
    }
    let dad = new Octopus("Man with the 8 strong legs");
    dad.name = "Man with the 3-piece suit"; // error! name is readonly.


Parameter properties let you create and initialize a member in one place. 
Here’s a further revision of the previous Octopus class using a parameter property:

Example: 
    class Octopus {
        readonly numberOfLegs: number = 8;
        constructor(readonly name: string) {}
    }




Accessors:



Example 1:

    class Employee {
    fullName: string;
    }

    let employee = new Employee();
    employee.fullName = "Bob Smith";
    if (employee.fullName) {
        console.log(employee.fullName);
    }



This method allows you to put rules on setters and getters rather than just 
    getting and setting at will like in example 1
Example 2: 
    const fullNameMaxLength = 10;

    class Employee {
        private _fullName: string;

        get fullName(): string {
            return this._fullName;
        }

        set fullName(newName: string) {
            if (newName && newName.length > fullNameMaxLength) {
            throw new Error("fullName has a max length of " + fullNameMaxLength);
            }

            this._fullName = newName;
        }
    }

    let employee = new Employee();
    employee.fullName = "Bob Smith";
    if (employee.fullName) {
        console.log(employee.fullName);
    }




Statics:
-   Attaches properties or methods to the instance class not the instance 
    -   Basically like attaching the info to the proto type of the object


Example:
    class Grid {
    static origin = { x: 0, y: 0 };

    calculateDistanceFromOrigin(point: { x: number; y: number }) {
        let xDist = point.x - Grid.origin.x;
        let yDist = point.y - Grid.origin.y;
        return Math.sqrt(xDist * xDist + yDist * yDist) / this.scale;
    }

    constructor(public scale: number) {}
    }

    let grid1 = new Grid(1.0); // 1x scale
    let grid2 = new Grid(5.0); // 5x scale

    console.log(grid1.calculateDistanceFromOrigin({ x: 10, y: 10 }));
    console.log(grid2.calculateDistanceFromOrigin({ x: 10, y: 10 }));





Abstract Classes:

Abstract classes are base classes from which other classes may be derived. They may not be instantiated 
directly. Unlike an interface, an abstract class may contain implementation details for its members. 
The abstract keyword is used to define abstract classes as well as abstract methods within an abstract class.


Example:

    abstract class Animal {
        abstract makeSound(): void;
        move(): void {
            console.log("roaming the earth...");
        }
    }



Methods within an abstract class that are marked as abstract do not contain an implementation and must be 
implemented in derived classes. Abstract methods share a similar syntax to interface methods. Both define 
the signature of a method without including a method body. However, abstract methods must include the abstract 
keyword and may optionally include access modifiers.



Example: 

    abstract class Department {
    constructor(public name: string) {}

    printName(): void {
        console.log("Department name: " + this.name);
    }

    abstract printMeeting(): void; // must be implemented in derived classes
    }

    class AccountingDepartment extends Department {
    constructor() {
        super("Accounting and Auditing"); // constructors in derived classes must call super()
    }

    printMeeting(): void {
        console.log("The Accounting Department meets each Monday at 10am.");
    }

    generateReports(): void {
        console.log("Generating accounting reports...");
    }
    }

    let department: Department; // ok to create a reference to an abstract type
    department = new Department(); // error: cannot create an instance of an abstract class
    department = new AccountingDepartment(); // ok to create and assign a non-abstract subclass
    department.printName();
    department.printMeeting();
    department.generateReports(); // error: method doesn't exist on declared abstract type





Constructor functions:


Example:
    class Greeter {
        greeting: string;
        constructor(message: string) {
            this.greeting = message;
        }
        greet() {
            return "Hello, " + this.greeting;
        }
    }

    let greeter: Greeter;
    greeter = new Greeter("world");
    console.log(greeter.greet()); // "Hello, world"


Same as:



    let Greeter = (function() {
        function Greeter(message) {
            this.greeting = message;
        }
        Greeter.prototype.greet = function() {
            return "Hello, " + this.greeting;
        };
        return Greeter;
    })();

    let greeter;
    greeter = new Greeter("world");
    console.log(greeter.greet()); // "Hello, world"


***
Here, let Greeter is going to be assigned the constructor function. When we call new and run this function, 
we get an instance of the class. The constructor function also contains all of the static members of the class. 
Another way to think of each class is that there is an instance side and a static side.





class Greeter {
  static standardGreeting = "Hello, there";
  greeting: string;
  greet() {
    if (this.greeting) {
      return "Hello, " + this.greeting;
    } else {
      return Greeter.standardGreeting;
    }
  }
}

let greeter1: Greeter;
greeter1 = new Greeter();
console.log(greeter1.greet()); // "Hello, there"

let greeterMaker: typeof Greeter = Greeter;
greeterMaker.standardGreeting = "Hey there!";

let greeter2: Greeter = new greeterMaker();
console.log(greeter2.greet()); // "Hey there!"


*****
In this example, greeter1 works similarly to before. We instantiate the Greeter class, and use this object. 
This we have seen before.

Next, we then use the class directly. Here we create a new variable called greeterMaker. This variable will 
hold the class itself, or said another way its constructor function. Here we use typeof Greeter, that is 
“give me the type of the Greeter class itself” rather than the instance type. Or, more precisely, 
“give me the type of the symbol called Greeter,” which is the type of the constructor function. This type 
will contain all of the static members of Greeter along with the constructor that creates instances of the Greeter 
class. We show this by using new on greeterMaker, creating new instances of Greeter and invoking them as before.





Using a class as an interface:

As we said in the previous section, a class declaration creates two things: a type representing instances of 
the class and a constructor function. Because classes create types, you can use them in the same places you would 
be able to use interfaces.


Example:

    class Point {
    x: number;
    y: number;
    }

    interface Point3d extends Point {
    z: number;
    }

    let point3d: Point3d = { x: 1, y: 2, z: 3 };




