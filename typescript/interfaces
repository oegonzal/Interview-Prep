
https://www.typescriptlang.org/docs/handbook/interfaces.html



Interfaces:

One of TypeScript’s core principles is that type checking focuses on the shape that values have. 
This is sometimes called “duck typing” or “structural subtyping”. 

***
In TypeScript, interfaces fill the role of naming these types, and are a powerful way of defining 
contracts within your code as well as contracts with code outside of your project




interface LabeledValue {
  label: string;
}

function printLabel(labeledObj: LabeledValue) {
  console.log(labeledObj.label);
}

let myObj = { size: 10, label: "Size 10 Object" };
printLabel(myObj);



Optional Params:

interface SquareConfig {
  color?: string;
  width?: number;
}

function createSquare(config: SquareConfig): { color: string; area: number } {
  let newSquare = { color: "white", area: 100 };
  if (config.color) {
    newSquare.color = config.color;
  }
  if (config.width) {
    newSquare.area = config.width * config.width;
  }
  return newSquare;
}

let mySquare = createSquare({ color: "black" });








The advantage of optional properties is that you can describe these possibly available properties while 
still also preventing use of properties that are not part of the interface. For example, had we mistyped 
the name of the color property in createSquare, we would get an error message letting us know:


interface SquareConfig {
  color?: string;
  width?: number;
}

function createSquare(config: SquareConfig): { color: string; area: number } {
  let newSquare = { color: "white", area: 100 };
  if (config.clor) {
Property 'clor' does not exist on type 'SquareConfig'. Did you mean 'color'?
    // Error: Property 'clor' does not exist on type 'SquareConfig'
    newSquare.color = config.clor;
Property 'clor' does not exist on type 'SquareConfig'. Did you mean 'color'?
  }
  if (config.width) {
    newSquare.area = config.width * config.width;
  }
  return newSquare;
}

let mySquare = createSquare({ color: "black" });



****
Interfaces allow you to only accept objects with a similar shape as in:
-   The object being passed in to a Fn cannot have differing props (this would cause an error)
-   You can also make passed in params optional




readonly

interface Point {
  readonly x: number;
  readonly y: number;
}


let p1: Point = { x: 10, y: 20 };
p1.x = 5; // error!
Cannot assign to 'x' because it is a read-only property.





TypeScript comes with a ReadonlyArray<T> type that is the same as Array<T> with all mutating methods removed, 
so you can make sure you don’t change your arrays after creation:

let a: number[] = [1, 2, 3, 4];
let ro: ReadonlyArray<number> = a;

ro[0] = 12; // error!
Index signature in type 'readonly number[]' only permits reading.
ro.push(5); // error!
Property 'push' does not exist on type 'readonly number[]'.
ro.length = 100; // error!
Cannot assign to 'length' because it is a read-only property.
a = ro; // error!
The type 'readonly number[]' is 'readonly' and cannot be assigned to the mutable type 'number[]'.



***
On the last line of the snippet you can see that even assigning the entire ReadonlyArray back to a normal array is illegal. 
You can still override it with a type assertion, though:

let a: number[] = [1, 2, 3, 4];
let ro: ReadonlyArray<number> = a;

a = ro as number[];
readonly vs const
The easiest way to remember whether to use readonly or const is to ask whether you’re using it on a variable or a property. 
Variables use const whereas properties use readonly.







***
Getting around the strictness of only using props within an implementation with this:


interface SquareConfig {
  color?: string;
  width?: number;
  [propName: string]: any;
}


OR


let mySquare = createSquare({ width: 100, opacity: 0.5 } as SquareConfig);


OR


We’ll discuss index signatures in a bit, but here we’re saying a SquareConfig can have any number of properties, 
and as long as they aren’t color or width, their types don’t matter.


***
One final way to get around these checks, which might be a bit surprising, is to assign the object 
to another variable: Since squareOptions won’t undergo excess property checks, the compiler won’t give you an error.

let squareOptions = { colour: "red", width: 100 };
let mySquare = createSquare(squareOptions);



****
The above workaround will work as long as you have a common property between squareOptions and SquareConfig. 
In this example, it was the property width. It will however, fail if the variable does not have any common object 
property. For example:

let squareOptions = { colour: "red" };
let mySquare = createSquare(squareOptions);








Function Types

interface SearchFunc {
  (source: string, subString: string): boolean;
}

let mySearch: SearchFunc;

mySearch = function (source: string, subString: string) {
  let result = source.search(subString);
  return result > -1;
};

*
Missing the return type is okay bc it is implied. This can also be done for parameters




For function types to correctly type check, the names of the parameters do not need to match. 
We could have, for example, written the above example like this:

let mySearch: SearchFunc;

mySearch = function (src, sub) {
  let result = src.search(sub);
  return result > -1;
};



let mySearch: SearchFunc;

mySearch = function (src: string, sub: string): boolean {
  let result = src.search(sub);
  return result > -1;
};





let mySearch: SearchFunc;

mySearch = function (src, sub) {

*** Type '(src: string, sub: string) => string' is not assignable to type 'SearchFunc'.
  Type 'string' is not assignable to type 'boolean'.


  let result = src.search(sub);
  return "string";
};





Indexable Types
Similarly to how we can use interfaces to describe function types, we can also describe types that 
we can “index into” like a[10], or ageMap["daniel"]. Indexable types have an index signature that 
describes the types we can use to index into the object, along with the corresponding return types 
when indexing. Let’s take an example:

interface StringArray {
  [index: number]: string;
}

let myArray: StringArray;
myArray = ["Bob", "Fred"];

let myStr: string = myArray[0];




Array Index hiearchy:
string => supertype
numeric => subtype
In array indexes number ind gets converted to string index

There are two types of supported index signatures: string and number. 
It is possible to support both types of indexers, 
but the type returned from a numeric indexer must be a ** subtype ** of the type returned from the string indexer. 
This is because when indexing with a number, 
JavaScript will actually convert that to a string before indexing into an object. 

That means that indexing with 100 (a number) is the same thing as indexing with "100" (a string), 
so the two need to be consistent.


interface Animal {
  name: string;
}

interface Dog extends Animal {
  breed: string;
}

// Error: indexing with a numeric string might get you a completely separate type of Animal!

interface NotOkay {
  [x: number]: Animal;

Numeric index type 'Animal' is not assignable to string index type 'Dog'.

  [x: string]: Dog;
}





While string index signatures are a powerful way to describe the “dictionary” pattern, they also enforce that all 
properties match their return type. This is because a string index declares that obj.property is also available 
as obj["property"]. In the following example, name’s type does not match the string index’s type, and the type 
checker gives an error:

interface NumberDictionary {
  [index: string]: number;
  length: number; // ok, length is a number
  name: string; // error, the type of 'name' is not a subtype of the indexer
Property 'name' of type 'string' is not assignable to string index type 'number'.
}



However, properties of different types are acceptable if the index signature is a union of the property types:

interface NumberOrStringDictionary {
  [index: string]: number | string;
  length: number; // ok, length is a number
  name: string; // ok, name is a string
}



Finally, you can make index signatures readonly in order to prevent assignment to their indices:

interface ReadonlyStringArray {
  readonly [index: number]: string;
}

let myArray: ReadonlyStringArray = ["Alice", "Bob"];
myArray[2] = "Mallory"; // error!
Index signature in type 'ReadonlyStringArray' only permits reading.






*****
Class Types
Implementing an interface
One of the most common uses of interfaces in languages like C# and Java, that of explicitly enforcing 
that a class meets a particular contract, is also possible in TypeScript.

interface ClockInterface {
  currentTime: Date;
}

class Clock implements ClockInterface {
  currentTime: Date = new Date();
  constructor(h: number, m: number) {}
}



You can also describe methods in an interface that are implemented in the class, as we do with setTime in the below example:

interface ClockInterface {
  currentTime: Date;
  setTime(d: Date): void;
}

class Clock implements ClockInterface {
  currentTime: Date = new Date();
  setTime(d: Date) {
    this.currentTime = d;
  }
  constructor(h: number, m: number) {}
}



**
Interfaces describe the public side of the class, rather than both the public and private side. This prohibits you 
from using them to check that a class also has particular types for the private side of the class instance.





Difference between the static and instance sides of classes
When working with classes and interfaces, it helps to keep in mind that a class has two types: the type of 
the static side and the type of the instance side. You may notice that if you create an interface with a 
construct signature and try to create a class that implements this interface you get an error:

interface ClockConstructor {
  new (hour: number, minute: number);
}

class Clock implements ClockConstructor {
Class 'Clock' incorrectly implements interface 'ClockConstructor'.
  Type 'Clock' provides no match for the signature 'new (hour: number, minute: number): any'.
  currentTime: Date;
  constructor(h: number, m: number) {}
}
This is because when a class implements an interface, only the instance side of the class is checked. Since the 
constructor sits in the static side, it is not included in this check.

Instead, you would need to work with the static side of the class directly. In this example, we define two interfaces,
ClockConstructor for the constructor and ClockInterface for the instance methods. Then, for convenience, we define a 
constructor function createClock that creates instances of the type that is passed to it:

interface ClockConstructor {
  new (hour: number, minute: number): ClockInterface;
}

interface ClockInterface {
  tick(): void;
}

function createClock(
  ctor: ClockConstructor,
  hour: number,
  minute: number
): ClockInterface {
  return new ctor(hour, minute);
}

class DigitalClock implements ClockInterface {
  constructor(h: number, m: number) {}
  tick() {
    console.log("beep beep");
  }
}

class AnalogClock implements ClockInterface {
  constructor(h: number, m: number) {}
  tick() {
    console.log("tick tock");
  }
}

let digital = createClock(DigitalClock, 12, 17);
let analog = createClock(AnalogClock, 7, 32);



** Above reminds me real inheritance with composition!!



Because createClock’s first parameter is of type ClockConstructor, in createClock(AnalogClock, 7, 32), it 
checks that AnalogClock has the correct constructor signature.

Another simple way is to use class expressions:

interface ClockConstructor {
  new (hour: number, minute: number);
}

interface ClockInterface {
  tick();
}

const DigitalClock: ClockConstructor = class DigitalClock implements ClockInterface {
  constructor(h: number, m: number) {}
  tick() {
    console.log("beep beep");
  }
};





Extending Interfaces

Like classes, interfaces can extend each other. This allows you to copy the members of one 
interface into another, which gives you more flexibility in how you separate your interfaces into reusable components.




****
Interfaces can be extended into other interfaces!!!!



*****
An interface can extend multiple interfaces, creating a combination of all of the interfaces.

interface Shape {
  color: string;
}

interface PenStroke {
  penWidth: number;
}

interface Square extends Shape, PenStroke {
  sideLength: number;
}

let square = {} as Square;
square.color = "blue";
square.sideLength = 10;
square.penWidth = 5.0;


