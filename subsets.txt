class Solution {
    /**
     * @param S: A set of numbers.
     * @return: A list of lists. All valid subsets.
     */
    public ArrayList<ArrayList<Integer>> subsets(int[] nums) {
        // write your code here
        ArrayList<ArrayList<Integer>> solution = new ArrayList<ArrayList<Integer>>();
        boolean[] visited = new boolean[nums.length];
        
        //Adding empty case
        solution.add(new ArrayList<Integer>());
        
        Arrays.sort(nums);
        helper(solution, nums, visited, 0, 0);
        
        return solution;
    }
    
    public void helper(ArrayList<ArrayList<Integer>> array, int[] nums, boolean[] visited, int start, int step){
        
        if(step == nums.length) return;
        
        ArrayList<Integer> list = new ArrayList<Integer>();
        
        for(int i = 0; i < nums.length; i++){
            if(!visited[i]){
                list.add(nums[i]);
            }
        }
        array.add(list);
        
        for(int i = start; i < nums.length; i++){
            if(!visited[i]){
                visited[i] = true;
                helper(array, nums, visited, i, step + 1);
                visited[i] = false;
            }
        }
        
    }
}

/*
    Get all possible combinations
    recurse all the way to the base case
    
    How to prevent duplicates
    
    0.preconditions and add [] and full [...], then call helper
    1. remove one
    2. recurse
        -add list to solution
        
*/