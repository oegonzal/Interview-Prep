//Submission: Successful
Total Runtime: 1434 ms
100% test cases passed.


//All 3 types of implementation with 3^n, n^2, and nlogn time complexities
public class Solution {
    /**
     * @param nums: The integer array
     * @return: The length of LIS (longest increasing subsequence)
     */
    public int longestIncreasingSubsequence(int[] nums) {
        if(nums==null || nums.length == 0) return 0;
        return LISbs(nums);
    }
    
    //starts as: int longest = LIS(nums, 0, 1);
    public int LIS(int[] nums, int i1, int i2){
        if(i2 == nums.length || i2 <= i1 || i1 > nums.length - 1) return 0;
        return  Math.max(
                            (nums[i1] < nums[i2]) ? 1 + LIS(nums, i1+1, i2+1) : 0,
                            Math.max(LIS(nums, i1, i2+1), (i1+1 < i2) ? LIS(nums, i1+1, i2) : 0)
                        );
    }
    //Time: O(3^(n-1)) Space: O(n)
    
    public int LISn(int[] nums) {
        if(nums==null || nums.length == 0) return 0;
        
        int len = nums.length;
        int[] dp = new int[len];
        
        for(int i = 0; i < len; i++){
            dp[i] = 1;
            for(int j = i - 1; j >= 0; j--){
                if(nums[j] < nums[i]) dp[i] = Math.max(dp[i], 1 + dp[j]);
            }
        }
        return dp[len-1];
    }
    //Time: O(n^2) Space: O(n)
    
    public int LISbs(int A[]){
        if(A==null || A.length == 0) return 0;
        int[] dp = new int[A.length];
        int len = 0;
        
        for(int n : A){
            int i = Arrays.binarySearch(dp, 0, len, n);
            if(i < 0) i = -(i + 1);
            dp[i] = n;
            if(len == i) { len++; }
        }
        return len;
    }
    //Time: O(nlogn) Space: O(n)
    
}

//[5,4,1,2,3]
//[4,2,4,5,3,7]




//First Try: (2 solutions) Untested



public class Solution {
    /**
     * @param nums: The integer array
     * @return: The length of LIS (longest increasing subsequence)
     */
    public int longestIncreasingSubsequence(int[] nums) {
        if(nums==null || nums.length == 0) return 0;
        
        int len = nums.length;
        int[] dp = new int[len];
        
        dp[0] = 1;
        for(int i = 1; i < len; i++){
            for(int j = i - 1; j >= 0; j--){
                if(nums[j] < nums[i]) nums[i] = 1 + nums[j];
            }
        }
        return dp[len-1];
    }
    
    //starts as: int longest = LIS(nums, 0, 1);
    public void LIS(int[] nums, int i1, int i2){
        if(i2 == nums.length || i2 <= i1 || i1 > nums.length - 1) return 0;
        return  Math.max(
                            (nums[i1] < nums[i2]) ? 1 + LIS(nums, i1+1, i2+1) : 0,
                            Math.max(LIS(nums, i1, i2+1), (i1+1 < i2) ? LIS(nums, i1+1, i2) : 0)
                        );
    }
}
