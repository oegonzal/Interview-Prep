//Fourth: 
public class Solution {
    
    public ArrayList<ArrayList<Integer>> fourSum(int[] numbers, int target) {
        
        ArrayList<ArrayList<Integer>> answer = new ArrayList<ArrayList<Integer>>();
        
        if(numbers.length < 4 || numbers == null) return answer;
        Arrays.sort(numbers);
        int length = numbers.length;
        
        for(int i = 0; i < length - 3; i++ ){
            if(i != 0 && numbers[i - 1] == numbers[i]) continue;
            for(int j = i + 1; j < length - 2; j++){
                if(j != i + 1 && numbers[j - 1] == numbers[j]) continue;
                
                int third = j + 1;
                int fourth = length - 1;
                
                while(third < fourth){
                    int sum = numbers[i] + numbers[j] + numbers[third] + numbers[fourth];
                    if(sum < target){
                        third++;
                    }
                    else if(sum > target){
                        fourth--;
                    }
                    else{
                        ArrayList<Integer> tuple = new ArrayList<Integer>();
                        tuple.add(numbers[i]);
                        tuple.add(numbers[j]);
                        tuple.add(numbers[third]);
                        tuple.add(numbers[fourth]);
                        answer.add(tuple);
                        third++;
                        fourth--;
                        while(third < fourth && numbers[third - 1] == numbers[third]){
                            third++;
                        }
                        
                        while(third < fourth && numbers[fourth + 1] == numbers[fourth]){
                            fourth--;
                        }
                    }
                }
            }
        }
        
        return answer;
    }
}






//testcases:
//[2,1,3,9,10,4,8,11,15], 25
//[1,0,-1,-1,-1,-1,0,1,1,1,2], 2
//[1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,0,0,-2,2,-5,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99], 11

//Third Try: Failed attempt, solution got way too complicated and doesn't work (more time wasted then helpful now)
public class Solution {
    
    class Pair{
        int[] array;
        
        public Pair(int loc1, int loc2){
            array = new int[2];
            this.array[0] = loc1;
            this.array[1] = loc2;
        }
    }
    
    public ArrayList<ArrayList<Integer>> fourSum(int[] numbers, int target) {
        
        ArrayList<ArrayList<Integer>> answer = new ArrayList<ArrayList<Integer>>();
        HashMap<Integer, LinkedList<Pair>> map = new HashMap<Integer, LinkedList<Pair>>();
        
        if(numbers.length < 4 || numbers == null) return answer;
        Arrays.sort(numbers);
        System.out.println(Arrays.toString(numbers));
        
        //make map of all possible pair sums - O(n^2)
        LinkedList<Pair> pairList;
        int curious = 0;
        for(int i = 0; i < numbers.length; i++){
            for(int j = i + 1; j < numbers.length; j++){
                int key = numbers[i] + numbers[j];
                if(!map.containsKey(key)){
                    map.put(key, new LinkedList<Pair>());
                }
                
                //Make sure list has unique pairs
                boolean inList = false;
                pairList = map.get(key);
                for(Pair p : pairList){
                    if(p.array[0] == numbers[i]){
                        inList = true;
                        break;
                    }
                }
                
                if(!inList){
                    System.out.println("-----------------");
                    System.out.println("key: " + key);
                    System.out.println("numbers[i]: " + numbers[i]);
                    System.out.println("numbers[j]: " + numbers[j]);
                    System.out.println();
                    
                    pairList.add(new Pair(numbers[i], numbers[j]));
                    map.put(key, pairList);
                }
                curious++;
            }
        }
        
        System.out.println(curious);
        
        HashMap<Integer, Integer> duplicates = new HashMap<Integer, Integer>();
        HashMap<String, Integer> dup2 = new HashMap<String, Integer>();
        ArrayList<Integer> tuple = null;
        StringBuilder str;
        for(Integer i : map.keySet()){
            if(map.containsKey(target - i) && !duplicates.containsKey(i)){
                
                System.out.println("----------");
                System.out.println(i);
                System.out.println(target - i);
                
                for(Pair p1 : map.get(i)){
                    for(Pair p2 : map.get(target - i)){
                        tuple = new ArrayList<Integer>();
                        str = new StringBuilder();
                        sortPairs(str, tuple, p1, p2);
                        String dupKey = str.toString();
                        if(!dup2.containsKey(dupKey)){
                          dup2.put(dupKey, 0);
                          answer.add(tuple);  
                        } 
                        System.out.println(p1.array[0] + ", " + p1.array[1] + ", " + p2.array[0] + ", " + p2.array[1]);
                    }
                }
                duplicates.put(target - i, 0); duplicates.put(i, 0);
            }
        }
        return answer;
    }
    public void sortPairs(StringBuilder str, ArrayList<Integer> tuple, Pair p1, Pair p2){
        int x1 = 0, x2 = 0;
        int val;
        while(x1 < 2 && x2 < 2){
            if(p1.array[x1] < p2.array[x2]){
                val = p1.array[x1];
                tuple.add(val);
                x1++;
                str.append(val);
            }
            else{
                val = p2.array[x2];
                tuple.add(val);
                x2++;
                str.append(val);
            }
        }
        while(x1 < 2){
            val = p1.array[x1];
            tuple.add(val);
            x1++;
            str.append(val);
        }
        while(x2 < 2){
            val = p2.array[x2];
            tuple.add(val);
            x2++;
            str.append(val);
        }
    }
}



//Second Try: 
public class Solution {
    
    class Pair{
        int[] array;
        
        public Pair(int loc1, int loc2){
            array = new int[2];
            this.array[0] = loc1;
            this.array[1] = loc2;
        }
    }
    
    public ArrayList<ArrayList<Integer>> fourSum(int[] numbers, int target) {
        
        ArrayList<ArrayList<Integer>> answer = new ArrayList<ArrayList<Integer>>();
        HashMap<Integer, LinkedList<Pair>> map = new HashMap<Integer, LinkedList<Pair>>();
        
        if(numbers.length < 4 || numbers == null) return answer;
        Arrays.sort(numbers);
        System.out.println(Arrays.toString(numbers));
        
        //make map of all possible pair sums - O(n^2)
        LinkedList<Pair> pairList;
        int curious = 0;
        for(int i = 0; i < numbers.length; i++){
            for(int j = i + 1; j < numbers.length; j++){
                int key = numbers[i] + numbers[j];
                if(!map.containsKey(key)){
                    map.put(key, new LinkedList<Pair>());
                }
                
                //Make sure list has unique pairs
                boolean inList = false;
                pairList = map.get(key);
                for(Pair p : pairList){
                    if(p.array[0] == numbers[i]){
                        inList = true;
                        break;
                    }
                }
                
                if(!inList){
                    System.out.println("-----------------");
                    System.out.println("key: " + key);
                    System.out.println("numbers[i]: " + numbers[i]);
                    System.out.println("numbers[j]: " + numbers[j]);
                    System.out.println();
                    
                    pairList.add(new Pair(numbers[i], numbers[j]));
                    map.put(key, pairList);
                }
                curious++;
            }
        }
        
        System.out.println(curious);
        
        HashMap<Integer, Integer> duplicates = new HashMap<Integer, Integer>();
        ArrayList<Integer> tuple = null;
        for(Integer i : map.keySet()){
            if(map.containsKey(target - i) && !duplicates.containsKey(i)){
                
                System.out.println("----------");
                System.out.println(i);
                System.out.println(target - i);
                
                for(Pair p1 : map.get(i)){
                    for(Pair p2 : map.get(target - i)){
                        tuple = new ArrayList<Integer>();
                        sortPairs(tuple, p1, p2);
                        answer.add(tuple);
                        System.out.println(p1.array[0] + ", " + p1.array[1] + ", " + p2.array[0] + ", " + p2.array[1]);
                    }
                }
                duplicates.put(target - i, 0); duplicates.put(i, 0);
            }
        }
        return answer;
    }
    public void sortPairs(ArrayList<Integer> tuple, Pair p1, Pair p2){
        int x1 = 0, x2 = 0;
        while(x1 < 2 && x2 < 2){
            if(p1.array[x1] < p2.array[x2]){
                tuple.add(p1.array[x1]);
                x1++;
            }
            else{
                tuple.add(p2.array[x2]);
                x2++;
            }
        }
        while(x1 < 2){
            tuple.add(p1.array[x1]);
            x1++;
        }
        while(x2 < 2){
            tuple.add(p2.array[x2]);
            x2++;
        }
    }
}


//Unfinished, becuz i made an array with out of bound errors, instead of storing in separate array delete lists i created in each key
public class Solution {
    
    class Pair{
        int[] array;
        
        public Pair(int loc1, int loc2){
            array = new int[2];
            this.array[0] = loc1;
            this.array[1] = loc2;
        }
    }
    
    public ArrayList<ArrayList<Integer>> fourSum(int[] numbers, int target) {
        
        ArrayList<ArrayList<Integer>> answer = new ArrayList<ArrayList<Integer>>();
        HashMap<Integer, LinkedList<Pair>> map = new HashMap<Integer, LinkedList<Pair>>();
        
        if(numbers.length < 4 || numbers == null) return answer;
        Arrays.sort(numbers);
        
        //make map of all possible pair sums - O(n^2)
        LinkedList<Pair> pairList;
        for(int i = 0; i < numbers.length; i++){
            for(int j = i + 1; i < numbers.length; i++){
                int key = numbers[i] + numbers[j];
                if(!map.containsKey(key)){
                    map.put(key, new LinkedList<Pair>());
                }
                
                //Make sure list has unique pairs
                boolean inList = false;
                pairList = map.get(key);
                for(Pair p : pairList){
                    if(p.array[0] == i){
                        inList = true;
                        break;
                    }
                }
                if(!inList){
                    pairList.add(new Pair(i, j));
                    map.put(key, pairList);
                }
            }
        }
        
        boolean[] duplicates = new boolean[map.size()];
        ArrayList<Integer> tuple = null;
        for(Integer i : map.keySet()){
            if(!duplicates[i] && map.containsKey(target - i)){
                for(Pair p1 : map.get(i)){
                    for(Pair p2 : map.get(target - i)){
                        tuple = new ArrayList<Integer>();
                        sortPairs(tuple, p1, p2);
                        answer.add(tuple);
                    }
                }
                duplicates[i] = true;
                duplicates[target - i] = true;
            }
        }
        return answer;
    }
    public void sortPairs(ArrayList<Integer> tuple, Pair p1, Pair p2){
        int x1 = 0, x2 = 0;
        while(x1 < 2 && x2 < 2){
            if(p1.array[x1] < p2.array[x2]){
                tuple.add(p1.array[x1]);
                x1++;
            }
            else{
                tuple.add(p2.array[x2]);
                x2++;
            }
        }
        while(x1 < 2){
            tuple.add(p1.array[x1]);
            x1++;
        }
        while(x2 < 2){
            tuple.add(p2.array[x2]);
            x2++;
        }
    }
}

//testcases:
//[2,1,3,9,10,4,8,11,15], 25
//[1,0,-1,-1,-1,-1,0,1,1,1,2], 2
//[1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,0,0,-2,2,-5,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99], 11


//Unfinished, but changing my duplicate approach from making a stringbuilder key to entering both pair sums into duplicate map and if they are already there than duplicate
public class Solution {
    
    class Pair<V>{
        V[] array;
        
        public Pair(V loc1, V loc2){
            array = new V[2];
            this.array[0] = loc1;
            this.array[1] = loc2;
        }
    }
    
    public ArrayList<ArrayList<Integer>> fourSum(int[] numbers, int target) {
        
        ArrayList<ArrayList<Integer>> answer = new ArrayList<ArrayList<Integer>>();
        HashMap<Integer, LinkedList<Pair>> map = new HashMap<Integer, LinkedList<Pair>>();
        HashMap<String, Integer> duplicates = new HashMap<String, Integer>();
        
        if(numbers.length < 4 || numbers == null) return answer;
        Arrays.sort(numbers);
        
        //make map of all possible pair sums - O(n^2)
        for(int i = 0; i < numbers.length; i++){
            for(int j = i + 1; i < numbers.length; i++){
                int key = numbers[i] + numbers[j];
                if(!map.containsKey(key)){
                    map.put(key, new LinkedList<Pair>());
                }
                map.put(key, map.get(key).add(new Pair(i, j)));
            }
        }
        
        ArrayList<Integer>() tuple = null;
        StringBuilder dupKey = null;
        for(Integer i : map.keySet()){
            if(map.containsKey(target - i)){
                tuple = new ArrayList<Integer>();
                dupKey = new StringBuilder();
                sortPairs(tuple, dupKey, map.get(i), map.get(target - i));
            }
        }
        
        return answer;
    }
    
    public void sortPairs(ArrayList<Integer> tuple, StringBuilder dupKey, Pair<Integer> p1, Pair<Integer> p2){
        int x1 = 0, x2 = 0, val;
        while(x1 < 2 && x2 < 2){
            if(p1.array[x1] < p2.array[x2]){
                val = p1.array[x1]; 
                tuple.push(val);
                x1++;
                dupKey.append(val);
            }
            else{
                val = p2.array[x2];
                tuple.push(val);
                x2++;
                dupKey.append(val);
            }
        }
        
        while(x1 < 2){
            val = p1.array[x1];
            tuple.push(val);
            x1++;
            dupKey.append(val);
        }
        
        while(x2 < 2){
            val = p2.array[x2];
            tuple.push(val);
            x2++;
            dupKey.append(val);
        }
    }
    
    
}

//testcases:
//[2,1,3,9,10,4,8,11,15], 25
//[1,0,-1,-1,-1,-1,0,1,1,1,2], 2
//[1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,0,0,-2,2,-5,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99], 11



//First Try: Time Exceeded
Total Runtime: 2725 ms
48% test cases passed.

public class Solution {

    public ArrayList<ArrayList<Integer>> fourSum(int[] numbers, int target) {
        
        ArrayList<ArrayList<Integer>> answer = new ArrayList<ArrayList<Integer>>();
        HashMap<String, Integer> duplicates = new HashMap<String, Integer>();
        
        if(numbers.length < 4 || numbers == null) return answer;
        
        Arrays.sort(numbers);
        helper(answer, duplicates, new ArrayList<Integer>(), numbers, target, 0, 0, 0);
        
        return answer;
    }
    
    //I didnt realize this but this recursion function is actually making it O(n^4)
    public void helper(ArrayList<ArrayList<Integer>> answer, HashMap<String, Integer> duplicates,  ArrayList<Integer> currList, int[] nums, int target, int currVal, int startInd, int iStep){
        
        if(iStep == 4){
            if(currVal == target){
                StringBuilder s = new StringBuilder();
                ArrayList<Integer> item = new ArrayList<Integer>();
                
                //check if duplicate & make make list
                for(Integer n : currList){
                    item.add(n);
                    s.append(n);
                }
                
                String key = s.toString();
                if(!duplicates.containsKey(key)){
                    answer.add(item);
                    duplicates.put(key, 0);
                }
            }
            return;
        } 
        
        for(int i = startInd; i < nums.length; i++){
            currList.add(nums[i]);
            helper(answer, duplicates, currList, nums, target, currVal + nums[i], i + 1, iStep + 1);
            currList.remove(iStep);
        }
    }
}

//testcases:
//[2,1,3,9,10,4,8,11,15], 25
//[1,0,-1,-1,-1,-1,0,1,1,1,2], 2
//[1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,0,0,-2,2,-5,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99,1,2,5,6,7,3,5,8,-33,-5,-72,12,-34,100,99], 11