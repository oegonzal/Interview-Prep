//Third Submission: Successful and with 3 mins to spare!
Total Runtime: 5514 ms
100% test cases passed.


/**
 * Definition of SegmentTreeNode:
 * public class SegmentTreeNode {
 *     public int start, end, count;
 *     public SegmentTreeNode left, right;
 *     public SegmentTreeNode(int start, int end, int count) {
 *         this.start = start;
 *         this.end = end;
 *         this.count = count;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     *@param root, start, end: The root of segment tree and 
     *                         an segment / interval
     *@return: The count number in the interval [start, end]
     */
    public int query(SegmentTreeNode root, int start, int end) {
        if(root == null || start > end) return 0;
        if(root.start == start && root.end == end) return root.count;
        
        int mid = (root.start + root.end)/2;
        return query(root.left, Math.max(root.start, start), Math.min(mid,end)) + 
                    query(root.right, Math.max(mid+1,start), Math.min(root.end, end));
    }
}



//Second:		Failed

/**
 * Definition of SegmentTreeNode:
 * public class SegmentTreeNode {
 *     public int start, end, count;
 *     public SegmentTreeNode left, right;
 *     public SegmentTreeNode(int start, int end, int count) {
 *         this.start = start;
 *         this.end = end;
 *         this.count = count;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     *@param root, start, end: The root of segment tree and 
     *                         an segment / interval
     *@return: The count number in the interval [start, end]
     */
    public int query(SegmentTreeNode root, int start, int end) {
        if(root == null || start > end) return 0;
        if(root.start == start && root.end == end) return root.count;
        
        int mid = (root.start + root.end)/2;
        return query(root.left,start,Math.min(mid,end))+query(root.right,Math.max(mid+1,start),end);
    }
}

//First:


/**
 * Definition of SegmentTreeNode:
 * public class SegmentTreeNode {
 *     public int start, end, count;
 *     public SegmentTreeNode left, right;
 *     public SegmentTreeNode(int start, int end, int count) {
 *         this.start = start;
 *         this.end = end;
 *         this.count = count;
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     *@param root, start, end: The root of segment tree and 
     *                         an segment / interval
     *@return: The count number in the interval [start, end]
     */
    public int query(SegmentTreeNode root, int start, int end) {
        if(root == null || start > end) return 0;
        if(root.start == start && root.end == end) return root.count;
        
        int mid = (root.start + root.end)/2;
        return query(root.left, start, mid) + query(root.right, mid+1, end);
    }
}