//Second Try: With Help and way past 30 mins (2hrs)
Total Runtime: 1611 ms
100% test cases passed.


class Solution {
    /**
     * @param nums: A list of integers.
     * @return: A list of unique permutations.
     */
    public List<List<Integer>> permuteUnique(int[] nums) {
        ArrayList<List<Integer>> list = new ArrayList<List<Integer>>();
        if(nums == null) return list;
        allPermutations(nums, list, 0);
        return list;
    }
    
    public void allPermutations(int[] A, ArrayList<List<Integer>> l, int ind){
        if(ind == A.length){
            List<Integer> item = new ArrayList<Integer>();
            for(int n : A) item.add(n);
            l.add(item);
            return;
        }
        Set<Integer> s = new HashSet<Integer>();
        for(int i = ind; i < A.length; i++){
            if(s.add(A[i])){
                swap(A, ind, i);
                allPermutations(A, l, ind+1);
                swap(A, ind, i);   
            }
        }
    }
    public void swap(int[] A, int i, int j){
        int s = A[i];
        A[i] = A[j];
        A[j] = s;
    }
}

//[1,2,2]

/*
    Here is the plan:
    
    1. Make a stack that has nodes that store Val and index where it was in the order
    2. As we go through it, when the val gets to the end we pop and try the new number of combs
    3. Continue this
    
    
    I was thinking we will probably need 2 stacks here, one for the indexes and another for the current formation.
    
    The nodes going into the formation will have the value of that position in the formation and the index where that value last came from in the arrayList.
    
    Keep in mind that in order to make all possible formation of a duplicate we need to use a stack. A stack will place the order of the dups and the last one should always be pulled out to be added to next available index unless more dups need to be added into the stack
    
    Each level in the formation needs to go from beginning to end of the current ArrayLists available elements.
    
    In order to know what the current position is we need to keep track of it using a counter or the node that entered into the stack
    
    The purpose of each level should be to traverse from start to end**
    
    We will be removing these vals from level to level to keep calcualtion accurate
*/





//First Implementtion:

class Solution {
    /**
     * @param nums: A list of integers.
     * @return: A list of unique permutations.
     */
    public List<List<Integer>> permuteUnique(int[] nums) {
        ArrayList<List<Integer>> list = new ArrayList<List<Integer>>();
        if(nums == null) return list;
        
        ArrayList<Integer> item = new ArrayList<Integer>();
        if(nums.length == 0){
            list.add(item);
            return list;
        }
        
        Arrays.sort(nums);
        int curr = 0;
        ArrayList<Node> stack = new ArrayList<Node>();
        stack.add(new Node(nums[0], 0));
        
        while(stack.size() > 0){
            Node n = stack.remove(stack.size() - 1);
            item.add(n.val);
            
            while()
            
            if(n.ind + 1 < nums.length){
                
            }
            else{
                ArrayList<Integer> nItem = new ArrayList<Integer>();
                for(int num : item) nItem.add(num);
                list.add(nItem);
            }
        }
        
        return list;
    } 
    class Node{
        public int val;
        public int ind;
        
        public Node(int val, int ind){
            this.val = val;
            this.ind = ind;
        }
    }
}

/*
    Here is the plan:
    
    1. Make a stack that has nodes that store Val and index where it was in the order
    2. As we go through it, when the val gets to the end we pop and try the new number of combs
    3. Continue this

*/

