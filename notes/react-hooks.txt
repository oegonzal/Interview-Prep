
https://css-tricks.com/snippets/css/a-guide-to-flexbox/
https://stackoverflow.com/questions/42756354/should-i-use-react-purecomponent-everywhere/42756445#:~:text=Make%20sure%20all%20the%20children%20components%20are%20also%20%22pure%22.&text=In%20order%20for%20PureComponent%20to,only%20upon%20props%20and%20state).
https://dev.to/yakimych/seriously-do-react-hooks-replace-state-containers-3cpl
https://medium.com/groww-engineering/stateless-component-vs-pure-component-d2af88a1200b
https://dmitripavlutin.com/dont-overuse-react-usecallback/
https://dmitripavlutin.com/use-react-memo-wisely/


React hooks:
16.8+

Why Hooks?
- Reusable logic
- Hooks allow you to reuse stateful logic without changing your component hierarchy.
- Hooks let you split one component into smaller functions based on what pieces are related 
  (such as setting up a subscription or fetching data), rather than forcing a split based on lifecycle methods.
- Often times it is difficult to break compnents down to smaller bc logic is mixed all over the place. 
  So ppl will use 3rd party libs but then abstracts too much, & uses too many files, makes resuing harder
- Classes do not minify very well
- Work well side by side withh Classes 
- Complex components become hard to understand
- Don't have to convert functional compnents to class componetns
- No "this" in functional compts


useCallback:
- only use when function ref being used in a useEffect 
- or when being used in a React.memo (PureComponent)
  - Like for example a list component that takes in low changing props but renders so many child items & has a function ref 
    that could potentially keep changing & thus causing rerenders


useEffect
- Replaces: componentDidMOunt (called after componeted is mounted for first time) & componentDidUPdate (called after a rerender)
  & componentWillUnmount (called after compnent is about to unmount)
  - Another lifecycle hook is shouldComponentUpdate
- useEffect also helps prevent a lot of bugs.
  - For example: in a class component there could be the case where one makes a subscription to object with a specific id, but 
    this id can be dynamic (a prop.id that can change)
    So when the prop changes id and the component unmounts, technically the unsubscribe method that is in the componentWillUnmount
    function will try to unsubscribe to a subscription that wasn't subscribed (bc on componentDidMount subscribed the original id)
    The fix for this is to add the componentDidUpdate lifecycle function & to unsubscribe the prev id, & then subscribe the new one 
    - In useEffect hooks this isn't an issue though bc the useEffect runs on every render & therefore always runs willUnmount logic 
      on the same effect / render cycle
      Here is the example:
      componentDidMount() {
        ChatAPI.subscribeToFriendStatus(
          this.props.friend.id,
          this.handleStatusChange
        );
      }

      componentDidUpdate(prevProps) {
        // Unsubscribe from the previous friend.id
        ChatAPI.unsubscribeFromFriendStatus(
          prevProps.friend.id,
          this.handleStatusChange
        );
        // Subscribe to the next friend.id
        ChatAPI.subscribeToFriendStatus(
          this.props.friend.id,
          this.handleStatusChange
        );
      }

      componentWillUnmount() {
        ChatAPI.unsubscribeFromFriendStatus(
          this.props.friend.id,
          this.handleStatusChange
        );
      }

    function FriendStatus(props) {
      // ...
      useEffect(() => {
        // ...
        ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);
        return () => {
          ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);
        };
      });


  - Its important to note that useEffect can be optimized.
    They are optimized bc they have a second argument that takes in dependencies.
    In this case, the useEffect callback will only run when the value in the dependency changes.
    This prevents all the rerenders from occurring. 
    It is also possible to just pass in an empty array meaning 0 dependencies. 
    The effect of this will be that the useEffect will just work as a componentDidmOunt & a componentWillUnmount. It only runs 
    on the mount and unmount lifecycle.

    Lastly, it is important to include functions that the useEffect uses INSIDE the useEffect callback.
    Reason this is important is because a function can have variables outside the scope of the useEffect & therefore may be 
    forgotten to be included in the dependency array. It is much safer to have them inside the useEffect callback. Otherwise 
    your useEffect will reference stale values from previous renders

    useEffect does not block the browser form updating the screen. The majority of effects do not need to happen sychronously.
    When they do (such as measuring the layout) there is "useLayoutEffect"
  - You can try moving that function outside of your component. In that case, the function is guaranteed to not 
    reference any props or state, and also doesn’t need to be in the list of dependencies.
    If the function you’re calling is a pure computation and is safe to call while rendering, you may call it outside 
    of the effect instead, and make the effect depend on the returned value.
    As a last resort, you can add a function to effect dependencies but wrap its definition into the useCallback Hook. 
    This ensures it doesn’t change on every render unless its own dependencies also change



- hooks need to be written at a top level (so not nested in a conditional, a loop, etc)
  React remembers the order so that it know what to return for each hook statement after a render. if one is in a conditional 
  that does not trigger then it'll shift the hook return data by 1 and thus create bugs




Custom Hooks:
- For sharing stateful logic instead of using renderprops & higherorder components
- Custom hooks DO NOT share logic 
- Custom hooks get isolated state bc they get called from the perspectice of the its parent component.
  As a result independent states and effects are created for each compnoent that calls a hook
- Use a custom Hook could hide complex logic behind a simple interface, or help untangle a messy component.
  - Try to resist using too much abstraction 
- Think of hooks of being able to produce a result or some data & then passing those on to other components 
  If another part of the component triggers a rerender, it is possible that the state changes and a custom hook takes it as input 
  & therefore produces another result it can contribute to other components in the render 
  Eg)
  const friendList = [
    { id: 1, name: 'Phoebe' },
    { id: 2, name: 'Rachel' },
    { id: 3, name: 'Ross' },
  ];

  function ChatRecipientPicker() {
    const [recipientID, setRecipientID] = useState(1);
    const isRecipientOnline = useFriendStatus(recipientID);

    return (
      <>
        <Circle color={isRecipientOnline ? 'green' : 'red'} />
        <select
          value={recipientID}
          onChange={e => setRecipientID(Number(e.target.value))}
        >
          {friendList.map(friend => (
            <option key={friend.id} value={friend.id}>
              {friend.name}
            </option>
          ))}
        </select>
      </>
    );
  }

- useState 
  - Functional updates 
    - const [count, setCount] = useState(initialCount);
      <button onClick={() => setCount(prevCount => prevCount - 1)}>-</button>
    - To replicate old react this.setState:
      Use functional state update:
      setState(prevState => {
        // Object.assign would also work
        return {...prevState, ...updatedValues};
      });

    - Lazy inital loading:
      const [state, setState] = useState(() => {
        const initialState = someExpensiveComputation(props);
        return initialState;
      });


- useMemo 
  - runs during rendering so don't put anything you don't want to happen while render is occurring instead
    use useEffect
  - Pass a “create” function and an array of dependencies. useMemo will only recompute the memoized 
    value when one of the dependencies has changed. This optimization helps to avoid expensive calculations on every render.

- useCallback 
  - A memoized callback to prevent extra rerenders (shouldComponentUpdate)
  - useCallback(fn, deps) is equivalent to useMemo(() => fn, deps).

- useRef 
  - This works because useRef() creates a plain JavaScript object. The only difference between useRef() and creating a 
    {current: ...} object yourself is that useRef will give you the same ref object on every render.
    Keep in mind that useRef doesn’t notify you when its content changes. Mutating the .current property doesn’t cause a re-render.
  - If you pass a ref object to React with <div ref={myRef} />, React will set its .current property to the corresponding DOM 
    node whenever that node changes.

- useLayoutEffect
  The signature is identical to useEffect, but it fires synchronously after all DOM mutations. 
  Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside useLayoutEffect will be 
  flushed synchronously, before the browser has a chance to paint.

  Prefer the standard useEffect when possible to avoid blocking visual updates.

Why Hooks?

We know that components and top-down data flow help us organize a large UI into small, 
independent, reusable pieces. However, we often can’t break complex components down any 
further because the logic is stateful and can’t be extracted to a function or another component.


Hooks apply the React philosophy (explicit data flow and composition) inside a component, rather than just 
between the components.


Mixin:
a mixin is a class containing methods that can be used by other classes without a need to inherit from it. 
In other words, a mixin provides methods that implement a certain behavior, but we do not use it alone, we use 
it to add the behavior to other classes.

Mixins introduce implicit dependencies

-   This is  the angluar1 problem. It uses a mixin approach that keeps getting more couples as time goes by
    where as react uses a bottom down data approach and components to encapsulate to prevents coupling
-   https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html#why-mixins-are-broken



Hooks are fully encapsulated — each time you call a Hook, it gets isolated local state within the currently executing component.
They’re not a way to share state — but a way to share stateful logic.

The state of each component is completely independent. Hooks are a way to reuse stateful logic, not state itself.

The ability to pass data between Hooks make them a great fit for expressing animations, data subscriptions, form management, 
and other stateful abstractions.
Unlike render props or higher-order components, Hooks don’t create a “false hierarchy” in your render tree.
They’re more like a flat list of “memory cells” attached to a component. No extra layers.


While it’s unusual that Hooks have to be called at the top level, you probably wouldn’t want to define state in 
a condition even if you could.



Where hook state is kept:
Perhaps you’re wondering where React keeps the state for Hooks. The answer is it’s kept in the exact same place where 
React keeps state for classes. React has an internal update queue which is the source of truth for any state, no matter 
how you define your components.


useReducer
-   Simplifying usage of state https://adamrackis.dev/state-and-use-reducer/
-   In conclusion, the Reducer Hook makes sure that this portion of the state management 
    is encapsulated with its own logic. By providing action types and optional payloads, you will always end up 
    with a predicatbale state change. In addition, you will never run into invalid states. For instance, previously
    it would have been possible to accidently set the isLoading and isError states to true. What should be displayed in 
    the UI for this case? Now, each state transition defined by the reducer function leads to a valid state object.
-   Considering throwing an error on the default if action does not match anything:
    const dataFetchReducer = (state, action) => {
        switch (action.type) {
            case 'FETCH_INIT':
                return { ...state };
            case 'FETCH_SUCCESS':
                return { ...state };
            case 'FETCH_FAILURE':
                return { ...state };
            default:
                throw new Error();
        }
    };




Fetch with hooks
https://www.robinwieruch.de/react-hooks-fetch-data
The async function declaration defines an asynchronous function, which returns an AsyncFunction object. 
An asynchronous function is a function which operates asynchronously via the event loop, using an implicit 
Promise to return its result.


However, an effect hook should return nothing or a clean up function. 
That's why you may see the following warning in your developer console log: 
07:41:22.910 index.js:1452 Warning: useEffect function must return a cleanup function or nothing. Promises 
and useEffect(async () => ...) are not supported, but you can call an async function inside an effect.. 
That's why using async directly in the useEffect function isn't allowed.




On fetch, how can we use memo for compnents to prevent rerendering sibling components that do not need to be 
rerendered 
-   For example with isLoading flag on a fetch call


-   Think about what logic belongs together to modularize it
    -   Think about what abstraction is trying to get solved, what problem?
-   Think about what changes often and how to encapsulate that together



ABORT DATA FETCHING IN EFFECT HOOK
-   Does not abort the fetch itself but rather the transition
-   https://www.robinwieruch.de/react-hooks-fetch-data

const useDataApi = (initialUrl, initialData) => {
  const [url, setUrl] = useState(initialUrl);
 
  const [state, dispatch] = useReducer(dataFetchReducer, {
    isLoading: false,
    isError: false,
    data: initialData,
  });
 
  useEffect(() => {
    let didCancel = false;
 
    const fetchData = async () => {
      dispatch({ type: 'FETCH_INIT' });
 
      try {
        const result = await axios(url);
 
        if (!didCancel) {
          dispatch({ type: 'FETCH_SUCCESS', payload: result.data });
        }
      } catch (error) {
        if (!didCancel) {
          dispatch({ type: 'FETCH_FAILURE' });
        }
      }
    };
 
    fetchData();
 
    return () => {
      didCancel = true;
    };
  }, [url]);
 
  return [state, setUrl];
};






HOOKS FAQ

How to test components that use Hooks?
function Example() {
  const [count, setCount] = useState(0);
  useEffect(() => {
    document.title = `You clicked ${count} times`;
  });
  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>
        Click me
      </button>
    </div>
  );
}




import React from 'react';
import ReactDOM from 'react-dom';
import { act } from 'react-dom/test-utils';
import Counter from './Counter';

let container;

beforeEach(() => {
  container = document.createElement('div');
  document.body.appendChild(container);
});

afterEach(() => {
  document.body.removeChild(container);
  container = null;
});

it('can render and update a counter', () => {
  // Test first render and effect
  act(() => {
    ReactDOM.render(<Counter />, container);
  });
  const button = container.querySelector('button');
  const label = container.querySelector('p');
  expect(label.textContent).toBe('You clicked 0 times');
  expect(document.title).toBe('You clicked 0 times');

  // Test second render and effect
  act(() => {
    button.dispatchEvent(new MouseEvent('click', {bubbles: true}));
  });
  expect(label.textContent).toBe('You clicked 1 times');
  expect(document.title).toBe('You clicked 1 times');
});


The calls to act() will also flush the effects inside of them.






How do lifecycle methods correspond to Hooks?
constructor: Function components don’t need a constructor. You can initialize the state in the useState call. 
If computing the initial state is expensive, you can pass a function to useState.
getDerivedStateFromProps: Schedule an update while rendering instead.
shouldComponentUpdate: See React.memo below.
render: This is the function component body itself.
componentDidMount, componentDidUpdate, componentWillUnmount: The useEffect Hook can express all combinations of these 
(including less common cases).
getSnapshotBeforeUpdate, componentDidCatch and getDerivedStateFromError: There are no Hook equivalents for these methods yet, 
but they will be added soon.




Is there something like instance variables?
Yes! The useRef() Hook isn’t just for DOM refs. The “ref” object is a generic container whose current property is 
mutable and can hold any value, similar to an instance property on a class.



function Timer() {
  const intervalRef = useRef();

  useEffect(() => {
    const id = setInterval(() => {
      // ...
    });
    intervalRef.current = id;
    return () => {
      clearInterval(intervalRef.current);
    };
  });

  // ...
}


If we just wanted to set an interval, we wouldn’t need the ref (id could be local to the effect), but it’s useful if 
we want to clear the interval from an event handler:

  // ...
  function handleCancelClick() {
    clearInterval(intervalRef.current);
  }
  // ...

Conceptually, you can think of refs as similar to instance variables in a class. Unless you’re doing 
lazy initialization, avoid setting refs during rendering — this can lead to surprising behavior. Instead, 
typically you want to modify refs in event handlers and effects.




Should I use one or many state variables?
This is because when we update a state variable, we replace its value. This is different from this.setState in a class, 
which merges the updated fields into the object.

-   we recommend to split state into multiple state variables based on which values tend to change together.
-   Separating independent state variables also has another benefit. It makes it easy to later extract some 
    related logic into a custom Hook



How to get the previous props or state?

function Counter() {
  const [count, setCount] = useState(0);
  const prevCount = usePrevious(count);
  return <h1>Now: {count}, before: {prevCount}</h1>;
}

function usePrevious(value) {
  const ref = useRef();
  useEffect(() => {
    ref.current = value;
  });
  return ref.current;
}


useRef
const refContainer = useRef(initialValue);
useRef returns a mutable ref object whose .current property is initialized to the passed argument (initialValue). 
The returned object will persist for the full lifetime of the component.


However, useRef() is useful for more than the ref attribute. It’s handy for keeping any mutable value around similar to 
how you’d use instance fields in classes.

This works because useRef() creates a plain JavaScript object. The only difference between useRef() and 
creating a {current: ...} object yourself is that useRef will give you the same ref object on every render.

Keep in mind that useRef doesn’t notify you when its content changes. Mutating the .current property doesn’t cause 
a re-render. If you want to run some code when React attaches or detaches a ref to a DOM node, you may want to use 
a callback ref instead.




Why am I seeing stale props or state inside my function?


If you intentionally want to read the latest state from some asynchronous callback, you could keep it in a ref, 
mutate it, and read from it.

Finally, another possible reason you’re seeing stale props or state is if you use the “dependency array” optimization but 
didn’t correctly specify all the dependencies. For example, if an effect specifies [] as the second argument but reads 
someProp inside, it will keep “seeing” the initial value of someProp. The solution is to either remove the dependency array, 
or to fix it. Here’s how you can deal with functions, and here’s other common strategies to run effects less often without 
incorrectly skipping dependencies.




How can I measure a DOM node?
One rudimentary way to measure the position or size of a DOM node is to use a callback ref. React will call that callback whenever the ref gets attached to a different node. Here is a small demo:

function MeasureExample() {
  const [height, setHeight] = useState(0);

  const measuredRef = useCallback(node => {
    if (node !== null) {
      setHeight(node.getBoundingClientRect().height);
    }
  }, []);

  return (
    <>
      <h1 ref={measuredRef}>Hello, world</h1>
      <h2>The above header is {Math.round(height)}px tall</h2>
    </>
  );
}
We didn’t choose useRef in this example because an object ref doesn’t notify us about changes to the current ref value. Using a callback ref ensures that even if a child component displays the measured node later (e.g. in response to a click), we still get notified about it in the parent component and can update the measurements.


Note that we pass [] as a dependency array to useCallback. This ensures that our ref callback doesn’t change between the re-renders, and so React won’t call it unnecessarily.




Is it safe to omit functions from the list of dependencies?
Generally speaking, no.

function Example({ someProp }) {
  function doSomething() {
    console.log(someProp);
  }

  useEffect(() => {
    doSomething();
  }, []); // 🔴 This is not safe (it calls `doSomething` which uses `someProp`)
}
It’s difficult to remember which props or state are used by functions outside of the effect. This is why usually you’ll want to declare functions needed by an effect inside of it. Then it’s easy to see what values from the component scope that effect depends on:

function Example({ someProp }) {
  useEffect(() => {
    function doSomething() {
      console.log(someProp);
    }

    doSomething();
  }, [someProp]); // ✅ OK (our effect only uses `someProp`)
}



If you specify a list of dependencies as the last argument to useEffect, useMemo, useCallback, or useImperativeHandle, it must include all values that are used inside the callback and participate in the React data flow. That includes props, state, and anything derived from them.

It is only safe to omit a function from the dependency list if nothing in it (or the functions called by it) references props, state, or values derived from them. This example has a bug:

function ProductPage({ productId }) {
  const [product, setProduct] = useState(null);

  async function fetchProduct() {
    const response = await fetch('http://myapi/product/' + productId); // Uses productId prop
    const json = await response.json();
    setProduct(json);
  }

  useEffect(() => {
    fetchProduct();
  }, []); // 🔴 Invalid because `fetchProduct` uses `productId`
  // ...
}


The recommended fix is to move that function inside of your effect. That makes it easy to see which props or state your effect uses, and to ensure they’re all declared:



function ProductPage({ productId }) {
  const [product, setProduct] = useState(null);

  useEffect(() => {
    // By moving this function inside the effect, we can clearly see the values it uses.
    async function fetchProduct() {
      const response = await fetch('http://myapi/product/' + productId);
      const json = await response.json();
      setProduct(json);
    }

    fetchProduct();
  }, [productId]); // ✅ Valid because our effect only uses productId
  // ...
}



This also allows you to handle out-of-order responses with a local variable inside the effect:

  useEffect(() => {
    let ignore = false;
    async function fetchProduct() {
      const response = await fetch('http://myapi/product/' + productId);
      const json = await response.json();
      if (!ignore) setProduct(json);
    }

    fetchProduct();
    return () => { ignore = true };
  }, [productId]);


If for some reason you can’t move a function inside an effect, there are a few more options:

You can try moving that function outside of your component. In that case, the function is guaranteed to not reference any props or state, and also doesn’t need to be in the list of dependencies.
If the function you’re calling is a pure computation and is safe to call while rendering, you may call it outside of the effect instead, and make the effect depend on the returned value.
As a last resort, you can add a function to effect dependencies but wrap its definition into the useCallback Hook. This ensures it doesn’t change on every render unless its own dependencies also change:
function ProductPage({ productId }) {
  // ✅ Wrap with useCallback to avoid change on every render
  const fetchProduct = useCallback(() => {
    // ... Does something with productId ...
  }, [productId]); // ✅ All useCallback dependencies are specified

  return <ProductDetails fetchProduct={fetchProduct} />;
}

function ProductDetails({ fetchProduct }) {
  useEffect(() => {
    fetchProduct();
  }, [fetchProduct]); // ✅ All useEffect dependencies are specified
  // ...
}


Note that in the above example we need to keep the function in the dependencies list. This ensures that a change in the productId prop of ProductPage automatically triggers a refetch in the ProductDetails component



What can I do if my effect dependencies change too often?
Sometimes, your effect may be using state that changes too often. You might be tempted to omit that state from a list of dependencies, but that usually leads to bugs:

function Counter() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    const id = setInterval(() => {
      setCount(count + 1); // This effect depends on the `count` state
    }, 1000);
    return () => clearInterval(id);
  }, []); // 🔴 Bug: `count` is not specified as a dependency

  return <h1>{count}</h1>;
}
The empty set of dependencies, [], means that the effect will only run once when the component mounts, and not on every re-render. The problem is that inside the setInterval callback, the value of count does not change, because we’ve created a closure with the value of count set to 0 as it was when the effect callback ran. Every second, this callback then calls setCount(0 + 1), so the count never goes above 1.

Specifying [count] as a list of dependencies would fix the bug, but would cause the interval to be reset on every change. Effectively, each setInterval would get one chance to execute before being cleared (similar to a setTimeout.) That may not be desirable. To fix this, we can use the functional update form of setState. It lets us specify how the state needs to change without referencing the current state:

function Counter() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    const id = setInterval(() => {
      setCount(c => c + 1); // ✅ This doesn't depend on `count` variable outside
    }, 1000);
    return () => clearInterval(id);
  }, []); // ✅ Our effect doesn't use any variables in the component scope

  return <h1>{count}</h1>;
}
(The identity of the setCount function is guaranteed to be stable so it’s safe to omit.)

Now, the setInterval callback executes once a second, but each time the inner call to setCount can use an up-to-date value for count (called c in the callback here.)

In more complex cases (such as if one state depends on another state), try moving the state update logic outside the effect with the useReducer Hook. This article offers an example of how you can do this. The identity of the dispatch function from useReducer is always stable — even if the reducer function is declared inside the component and reads its props.

As a last resort, if you want something like this in a class, you can use a ref to hold a mutable variable. Then you can write and read to it. For example:

function Example(props) {
  // Keep latest props in a ref.
  const latestProps = useRef(props);
  useEffect(() => {
    latestProps.current = props;
  });

  useEffect(() => {
    function tick() {
      // Read latest props at any time
      console.log(latestProps.current);
    }

    const id = setInterval(tick, 1000);
    return () => clearInterval(id);
  }, []); // This effect never re-runs
}



How do I implement shouldComponentUpdate?
You can wrap a function component with React.memo to shallowly compare its props:

const Button = React.memo((props) => {
  // your component
});
It’s not a Hook because it doesn’t compose like Hooks do. React.memo is equivalent to PureComponent, but it only compares props. (You can also add a second argument to specify a custom comparison function that takes the old and new props. If it returns true, the update is skipped.)

React.memo doesn’t compare state because there is no single state object to compare. But you can make children pure too, or even optimize individual children with useMemo.




useMemo
const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);
Returns a memoized value.

Pass a “create” function and an array of dependencies. useMemo will only recompute the memoized value when one of the dependencies has changed. This optimization helps to avoid expensive calculations on every render.

Remember that the function passed to useMemo runs during rendering. Don’t do anything there that you wouldn’t normally do while rendering. For example, side effects belong in useEffect, not useMemo.

If no array is provided, a new value will be computed on every render.

You may rely on useMemo as a performance optimization, not as a semantic guarantee. In the future, React may choose to “forget” some previously memoized values and recalculate them on next render, e.g. to free memory for offscreen components. Write your code so that it still works without useMemo — and then add it to optimize performance.



Remember that useMemo and React.memo are different
-   React.memo does a shallow comparison and can be used on functional components to represent shouldComponentUpdate
-   useMemo has a dependency list, runs during render (so do not put heavy computation or side effects here),


function Parent({ a, b }) {
  // Only re-rendered if `a` changes:
  const child1 = useMemo(() => <Child1 a={a} />, [a]);
  // Only re-rendered if `b` changes:
  const child2 = useMemo(() => <Child2 b={b} />, [b]);
  return (
    <>
      {child1}
      {child2}
    </>
  )
}


Note that this approach won’t work in a loop because Hook calls can’t be placed inside loops. But you can extract a separate component for the list item, and call useMemo there.




How to create expensive objects lazily?
useMemo lets you memoize an expensive calculation if the dependencies are the same. However, it only serves as a hint, and doesn’t guarantee the computation won’t re-run. But sometimes you need to be sure an object is only created once.

The first common use case is when creating the initial state is expensive:

function Table(props) {
  // ⚠️ createRows() is called on every render
  const [rows, setRows] = useState(createRows(props.count));
  // ...
}
To avoid re-creating the ignored initial state, we can pass a function to useState:

function Table(props) {
  // ✅ createRows() is only called once
  const [rows, setRows] = useState(() => createRows(props.count));
  // ...
}
React will only call this function during the first render. See the useState API reference.

You might also occasionally want to avoid re-creating the useRef() initial value. For example, maybe you want to ensure some imperative class instance only gets created once:

function Image(props) {
  // ⚠️ IntersectionObserver is created on every render
  const ref = useRef(new IntersectionObserver(onIntersect));
  // ...
}
useRef does not accept a special function overload like useState. Instead, you can write your own function that creates and sets it lazily:

function Image(props) {
  const ref = useRef(null);

  // ✅ IntersectionObserver is created lazily once
  function getObserver() {
    if (ref.current === null) {
      ref.current = new IntersectionObserver(onIntersect);
    }
    return ref.current;
  }

  // When you need it, call getObserver()
  // ...
}
This avoids creating an expensive object until it’s truly needed for the first time. If you use Flow or TypeScript, you can also give getObserver() a non-nullable type for convenience.








Are Hooks slow because of creating functions in render?

No. In modern browsers, the raw performance of closures compared to classes doesn’t differ significantly except in extreme scenarios.

In addition, consider that the design of Hooks is more efficient in a couple ways:

Hooks avoid a lot of the overhead that classes require, like the cost of creating class instances and binding event handlers in the constructor.
Idiomatic code using Hooks doesn’t need the deep component tree nesting that is prevalent in codebases that use higher-order components, render props, and context. With smaller component trees, React has less work to do.
Traditionally, performance concerns around inline functions in React have been related to how passing new callbacks on each render breaks shouldComponentUpdate optimizations in child components. Hooks approach this problem from three sides.

The useCallback Hook lets you keep the same callback reference between re-renders so that shouldComponentUpdate continues to work:

// Will not change unless `a` or `b` changes
const memoizedCallback = useCallback(() => {
  doSomething(a, b);
}, [a, b]);
The useMemo Hook makes it easier to control when individual children update, reducing the need for pure components.
Finally, the useReducer Hook reduces the need to pass callbacks deeply, as explained below.
How to avoid passing callbacks down?
We’ve found that most people don’t enjoy manually passing callbacks through every level of a component tree. Even though it is more explicit, it can feel like a lot of “plumbing”.

In large component trees, an alternative we recommend is to pass down a dispatch function from useReducer via context:

const TodosDispatch = React.createContext(null);

function TodosApp() {
  // Note: `dispatch` won't change between re-renders
  const [todos, dispatch] = useReducer(todosReducer);

  return (
    <TodosDispatch.Provider value={dispatch}>
      <DeepTree todos={todos} />
    </TodosDispatch.Provider>
  );
}
Any child in the tree inside TodosApp can use the dispatch function to pass actions up to TodosApp:

function DeepChild(props) {
  // If we want to perform an action, we can get dispatch from context.
  const dispatch = useContext(TodosDispatch);

  function handleClick() {
    dispatch({ type: 'add', text: 'hello' });
  }

  return (
    <button onClick={handleClick}>Add todo</button>
  );
}
This is both more convenient from the maintenance perspective (no need to keep forwarding callbacks), and avoids the callback problem altogether. Passing dispatch down like this is the recommended pattern for deep updates.

Note that you can still choose whether to pass the application state down as props (more explicit) or as context (more convenient for very deep updates). If you use context to pass down the state too, use two different context types — the dispatch context never changes, so components that read it don’t need to rerender unless they also need the application state.








How to read an often-changing value from useCallback?

Note

We recommend to pass dispatch down in context rather than individual callbacks in props. The approach below is only mentioned here for completeness and as an escape hatch.

Also note that this pattern might cause problems in the concurrent mode. We plan to provide more ergonomic alternatives in the future, but the safest solution right now is to always invalidate the callback if some value it depends on changes.

In some rare cases you might need to memoize a callback with useCallback but the memoization doesn’t work very well because the inner function has to be re-created too often. If the function you’re memoizing is an event handler and isn’t used during rendering, you can use ref as an instance variable, and save the last committed value into it manually:

function Form() {
  const [text, updateText] = useState('');
  const textRef = useRef();

  useEffect(() => {
    textRef.current = text; // Write it to the ref
  });

  const handleSubmit = useCallback(() => {
    const currentText = textRef.current; // Read it from the ref
    alert(currentText);
  }, [textRef]); // Don't recreate handleSubmit like [text] would do

  return (
    <>
      <input value={text} onChange={e => updateText(e.target.value)} />
      <ExpensiveTree onSubmit={handleSubmit} />
    </>
  );
}
This is a rather convoluted pattern but it shows that you can do this escape hatch optimization if you need it. It’s more bearable if you extract it to a custom Hook:

function Form() {
  const [text, updateText] = useState('');
  // Will be memoized even if `text` changes:
  const handleSubmit = useEventCallback(() => {
    alert(text);
  }, [text]);

  return (
    <>
      <input value={text} onChange={e => updateText(e.target.value)} />
      <ExpensiveTree onSubmit={handleSubmit} />
    </>
  );
}

function useEventCallback(fn, dependencies) {
  const ref = useRef(() => {
    throw new Error('Cannot call an event handler while rendering.');
  });

  useEffect(() => {
    ref.current = fn;
  }, [fn, ...dependencies]);

  return useCallback(() => {
    const fn = ref.current;
    return fn();
  }, [ref]);
}
In either case, we don’t recommend this pattern and only show it here for completeness. Instead, it is preferable to avoid passing callbacks deep down.





useEffect

Instead, use useEffect. The function passed to useEffect will run after the render is committed to the screen. 
Think of effects as an escape hatch from React’s purely functional world into the imperative world.

Unlike componentDidMount and componentDidUpdate, the function passed to useEffect fires after layout and paint, 
during a deferred event. This makes it suitable for the many common side effects, like setting up subscriptions 
and event handlers, because most types of work shouldn’t block the browser from updating the screen.





component keep hook state 
-   bc upon initialization they make cells of state where the first useState has the first cell and create an object
    to pointer of its state, then it moves on to next states for that component


*****
-   Think about the inefficiency of getting distracted
-   Think about readability & forming logic that will be easier to break up & conceptual idea (not code)
-   Being part of a strong organization & influencing it

