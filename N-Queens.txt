//Final Solution: (Includes both recursive and iterative version)
Total Runtime: 1705 ms
100% test cases passed.


class Solution {
    /**
     * Get all distinct N-Queen solutions
     * @param n: The number of queens
     * @return: All distinct solutions
     * For example, A string '...Q' shows a queen on forth position
     */
    ArrayList<ArrayList<String>> solveNQueens(int n) {
        ArrayList<ArrayList<String>> ans =  new ArrayList<ArrayList<String>>();
        if(n<1){
            ans.add(new ArrayList<String>());
            return ans;
        }

        char[][] board = new char[n][n];
        for(char[] a : board) Arrays.fill(a, '.');
        LinkedList<Pair> stack = new LinkedList<Pair>();
        stack.addLast(new Pair(0, 0));
        
        while(stack.size() > 0){
            Pair p = stack.peekLast(); 
            
            if(p.x == n) stack.removeLast();
            else{
                if(isValid(board, p.x, p.y)){
                    board[p.y][p.x] = 'Q';
                    
                    if(p.y == n-1){
                        ArrayList<String> ite = new ArrayList<String>();
                        for(char[] a : board) ite.add(new String(a));
                        ans.add(ite);
                    }
                    else stack.addLast(new Pair(0, p.y + 1));
                }
                else board[p.y][p.x++] = '.';
            }
        }
        //solveNQueensRecursively(ans, board, 0);
        return ans;
    }

    public void printBoard(char[][] board ){
        for(char[] item : board){
            System.out.println(Arrays.toString(item));
        }
        System.out.println();
    }

    public boolean isValid(char[][] board, int xPos, int yPos){
        if(xPos < 0 || xPos >= board.length || yPos < 0 || yPos >= board.length) return false;
    
        int n = board.length;
        for(int i = 0; xPos + i < n && yPos + i < n; i++){
                if(board[yPos + i][xPos + i] == 'Q') return false;
        }
        for(int i = 0; xPos + i < n && yPos - i >= 0; i++){
                if(board[yPos - i][xPos + i] == 'Q') return false;
        }
        for(int i = 0; xPos - i >= 0 && yPos + i < n; i++){
                if(board[yPos + i][xPos - i] == 'Q') return false;
        }
        for(int i = 0; xPos - i >= 0 && yPos - i >= 0; i++){
                if(board[yPos - i][xPos - i] == 'Q') return false;
        }
        for(int y = 0; y < board.length; y++){
            if(board[y][xPos] == 'Q') return false;
        }
        for(int x = 0; x < board[0].length; x++){
            if(board[yPos][x] == 'Q') return false;
        }
        return true;
    }
    
    class Pair{
        public int x;
        public int y;
        public Pair(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
    
    public void solveNQueensRecursively(ArrayList<ArrayList<String>> ans, char[][] board, int y){
        if(y==board.length){
            ArrayList<String> ite = new ArrayList<String>();
            for(char[] a : board) ite.add(new String(a));
            ans.add(ite);
            return;
        }
        for(int i = 0; i < board.length; i++){
            if(isValid(board, i, y)){
                board[y][i] = 'Q';
                solveNQueensRecursively(ans, board, y+1);
                board[y][i] = '.';   
            }
        }
    }
};



//First Submission: 
Total Runtime: 1705 ms
100% test cases passed.



class Solution {
    /**
     * Get all distinct N-Queen solutions
     * @param n: The number of queens
     * @return: All distinct solutions
     * For example, A string '...Q' shows a queen on forth position
     */
    ArrayList<ArrayList<String>> solveNQueens(int n) {
        ArrayList<ArrayList<String>> ans =  new ArrayList<ArrayList<String>>();
        if(n<1){
            ans.add(new ArrayList<String>());
            return ans;
        }
        
        //Initial points
        LinkedList<Pair> stack = new LinkedList<Pair>();
        char[][] board = new char[n][n];
        for(char[] a : board) Arrays.fill(a, '.');
        stack.addLast(new Pair(0, 0));
        
        while(stack.size() > 0){
            Pair p = stack.peekLast(); 
            
            if(p.x == n) stack.removeLast();
            else{
                if(isValid(board, p.x, p.y)){
                    board[p.y][p.x] = 'Q';
                    
                    if(p.y == n-1){
                        ArrayList<String> ite = new ArrayList<String>();
                        for(char[] a : board) ite.add(new String(a));
                        ans.add(ite);
                    }
                    else stack.addLast(new Pair(0, p.y + 1));
                }
                else board[p.y][p.x++] = '.';
            }
        }
        return ans;
    }

    public void printBoard(char[][] board ){
        for(char[] item : board){
            System.out.println(Arrays.toString(item));
        }
        System.out.println();
    }

    public boolean isValid(char[][] board, int xPos, int yPos){
        if(xPos < 0 || xPos >= board.length || yPos < 0 || yPos >= board.length) return false;
    
        int n = board.length;
        for(int i = 0; xPos + i < n && yPos + i < n; i++){
                if(board[yPos + i][xPos + i] == 'Q') return false;
        }
        for(int i = 0; xPos + i < n && yPos - i >= 0; i++){
                if(board[yPos - i][xPos + i] == 'Q') return false;
        }
        for(int i = 0; xPos - i >= 0 && yPos + i < n; i++){
                if(board[yPos + i][xPos - i] == 'Q') return false;
        }
        for(int i = 0; xPos - i >= 0 && yPos - i >= 0; i++){
                if(board[yPos - i][xPos - i] == 'Q') return false;
        }
        for(int y = 0; y < board.length; y++){
            if(board[y][xPos] == 'Q') return false;
        }
        for(int x = 0; x < board[0].length; x++){
            if(board[yPos][x] == 'Q') return false;
        }
        return true;
    }
    
    class Pair{
        public int x;
        public int y;
        public Pair(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
};




//First Try:



class Solution {
    /**
     * Get all distinct N-Queen solutions
     * @param n: The number of queens
     * @return: All distinct solutions
     * For example, A string '...Q' shows a queen on forth position
     */
    ArrayList<ArrayList<String>> solveNQueens(int n) {
        ArrayList<ArrayList<String>> ans =  new ArrayList<ArrayList<String>>();
        if(n<1){
            ans.add(new ArrayList<String>());
            return ans;
        }
        
        if(n==1){
            ArrayList<String> item = new ArrayList<String>();
            item.add("Q");
            ans.add(item);
            return ans;
        };
        
        //Initial points
        LinkedList<Pair> stack = new LinkedList<Pair>();
        char[][] board = new char[n][n];
        for(char[] a : board) Arrays.fill(a, '.');
        stack.addLast(new Pair(-1, 0));
        Pair p = null;
        
        while(stack.size() > 0){
                                                printBoard(board);
            p = stack.peekLast();
            
            if(p.x > n) stack.removeLast();
            else if(p.y==n){
                if(isValid(board, p.x, p.y)){
                    ArrayList<String> ite = new ArrayList<String>();
                    for(char[] a : board) ite.add(new String(a));
                    ans.add(ite);
                    board[p.y][p.x] = '.';
                    stack.removeLast();
                }
            }
            else{
                if(isValid(board, p.x, p.y)){
                    //board[p.y][p.x] = 'Q';
                    stack.addLast(new Pair(-1, p.y + 1));
                }
                else System.out.println("not valid try p.x++ \n");
            }
            
            //Set up next possibility
            if(stack.size() > 0){
                p = stack.peekLast();
                if(p.x + 1 < n && p.y < n) board[p.y][p.x + 1] = 'Q';
                p.x++;
            }
        }
        return ans;
    }

    public void printBoard(char[][] board ){
        for(char[] item : board){
            System.out.println(Arrays.toString(item));
        }
        System.out.println();
    }

    public boolean isValid(char[][] board, int xPos, int yPos){
        if(xPos < 0 || xPos >= board.length || yPos < 0 || yPos >= board.length) return false;
        
        for(int x = xPos; x < board[0].length; x++){
            for(int y = yPos; y < board.length; y++){
                if(board[y][x] == 'Q') return false;
            }
        }
        for(int x = xPos; x < board[0].length; x++){
            for(int y = yPos; y >= 0; y--){
                if(board[y][x] == 'Q') return false;
            }
        }
        for(int x = xPos; x >= 0; x--){
            for(int y = yPos; y < board.length; y++){
                if(board[y][x] == 'Q') return false;
            }
        }
        for(int x = xPos; x >= 0; x--){
            for(int y = yPos; y >= 0; y--){
                if(board[y][x] == 'Q') return false;
            }
        }
        for(int y = 0; y < board.length; y++){
            if(board[y][xPos] == 'Q') return false;
        }
        for(int x = 0; x < board[0].length; x++){
            if(board[yPos][x] == 'Q') return false;
        }
        return true;
    }
    
    class Pair{
        public int x;
        public int y;
        public Pair(int x, int y){
            this.x = x;
            this.y = y;
        }
    }
};