//Second Attmept: (Recursive and DP)
Total Runtime: 1605 ms
100% test cases passed.


public class Solution {
    /**
     * @param S, T: Two string.
     * @return: Count the number of distinct subsequences
     */
    public int numDistinct(String S, String T) {
        if(T.equals("") || T == null) return 1;
        if(S.equals("") || S == null) return 0;
        
        int[] dp = new int[T.length()+1];
        dp[0] = 1;
        
        for(int s = 0; s < S.length(); s++){
            for(int t = T.length() - 1; t >= 0; t--){
                if(S.charAt(s) == T.charAt(t)){
                    dp[t+1] += dp[t]; 
                }
            }
        }
        return dp[T.length()];
    }
    
    public int findSubSeq(String S, String T, int i1, int i2){
        if(i2 == T.length()) return 1;
        if(i1 == S.length()) return 0;
        
        int count = 0;
        if(S.charAt(i1) == T.charAt(i2)){
            count += findSubSeq(S, T, i1+1, i2+1) + findSubSeq(S, T, i1+1, i2);
        }
        else count += findSubSeq(S, T, i1+1, i2);
        return count;
    }
}



//First Attempt:



public class Solution {
    /**
     * @param S, T: Two string.
     * @return: Count the number of distinct subsequences
     */
    public int numDistinct(String S, String T) {
        if(S.equals("") || S == null) return 0;
        if(T.equals("") || T == null) return 1;
        
        int subSeq = findSubSeq(S, T, 0, 0);
        
        
        return subSeq;
    }
    
    public int findSubSeq(String S, String T, int i1, int i2){
        if(i2 == T.length()) return 1;
        if(i1 == S.length()) return 0;
        
        int count = 0;
        for(int i = i1; i < S.length(); i++){
            if(S.charAt(i) == T.charAt(i2)) {
                count += findSubSeq(S, T, i1+1, i2+1);
            }
        }
        return count;
    }
}
