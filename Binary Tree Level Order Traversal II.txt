//First Try:
Total Runtime: 1619 ms
100% test cases passed.


/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
 
 
public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: buttom-up level order a list of lists of integer
     */
    public ArrayList<ArrayList<Integer>> levelOrderBottom(TreeNode root) {
        ArrayList<ArrayList<Integer>> answer = new ArrayList<ArrayList<Integer>>();
        if(root == null) return answer;
        
        int num = 1;
        ArrayList<TreeNode> pending = new ArrayList<TreeNode>();
        ArrayList<Integer> level = new ArrayList<Integer>();
        
        pending.add(root);
        level.add(root.val);
        answer.add(level);
        while(pending.size() > 0){
            int temp = 0;
            level = new ArrayList<Integer>();
            for(int i = 0; i < num; i++){
                TreeNode node = pending.get(i);
                if(node.left != null){ 
                    pending.add(node.left);
                    level.add(node.left.val);
                    temp++;
                }
                if(node.right != null){ 
                    pending.add(node.right);
                    level.add(node.right.val);
                    temp++;
                }
            }
            if(temp!=0) answer.add(0, level);
            pending.subList(0, num).clear();
            num = temp;
        }
        return answer;
    }
}

//{1,2,3}

/*
    I will need 3 queues?
    -One to hold all pending Nodes
    -One to hold current level nodes
    -One to hold number of nodes per level


*/