const _ = require('lodash');


/* 
Your previous Plain Text content is preserved below:

Implement a "Time Traveling" hash table 

Requirements 

A.  Insert(key, value).  Should be able to insert values in constant time.

B.  Get(key, time).  Specify a time and a key and the hash table returns the value that would have been returned if you were actually querying at the specified time in the past.


Insert
key, value, time
- dict

Get
- key, time
- Bounded only to past


t  key

5  a
4  c
3  b
2  b
1  a

Get(5, b)

{
  'time_n' : {keys: value},
  ...
  'time_i' : {keys: value}
}


Insert(key, value, time)

dict[time] = [].append({key: value}


Get(key, time):
In object:
- get keys that are bigger than time from object
- iterate sonnest to oldest time list
- return (value)

Test:




 */






class TimeTravel {
 constructor() {
   // Store instead as array & do binary search for time O(logn)
   // Inserts may be coming in chronological order so they can be 
   //  stacked on array (Question to ask)
   
   
   this.struct = {}
 }
  
  Get(key, time) {
    
    // This is currently O(nlogn) bc of sort
    let lowerBoundKeys = Object.keys(this.struct).filter((timeKey) => {
      return timeKey <= time;
    }).sort();
    // smallest to biggest
    
    for (let i = lowerBoundKeys.length-1; i >= 0; i--) {
      const value = this.struct[lowerBoundKeys[i]][key];
      if (value) {
        return value; 
      }
    }
    
    return null;
  }
  
  Insert(key, value, time) {
    if (!this.struct[time]) {
      this.struct[time] = {} 
    }
    
    this.struct[time][key] = value;
  }
}



// Test cases

const tt = new TimeTravel();

// key, value, time
tt.Insert('key_1', 'val_1', 4)
tt.Insert('key_1', 'val_2', 3)
tt.Insert('key_1', 'val_3', 2)
tt.Insert('key_1', 'val_4', 1)



console.log(tt.Get('key_1', 1)) // val_4
console.log(tt.Get('key_1', 3)) // val_2
console.log(tt.Get('key_1', 4)) // val_1
