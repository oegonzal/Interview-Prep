//Second Implementation: Took about a total time of 1hr 30mins
Total Runtime: 1525 ms
100% test cases passed.

Here my idea was to look for the first bigger number start from the left and remove it.
It works -> greedy approach

public class Solution {
    /**
     *@param A: A positive integer which has N digits, A is a string.
     *@param k: Remove k digits.
     *@return: A string
     */
    public String DeleteDigits(String A, int k) {
        
        for(int i = 0; i < k; i++){
            int remove = 0, j = 0;
            for(; j < A.length()-1; j++){
                if(A.charAt(j) > A.charAt(j+1)){
                    remove = j;
                    break;
                }
            }
            if(j == A.length() - 1) remove = j;
            
            StringBuilder st = new StringBuilder(A);
            st.deleteCharAt(remove);
            while(st.length() > 0 && st.charAt(0) == '0') st.deleteCharAt(0);
            A = st.toString();
        }
        return A;
    }
}


//First Implentation that didnt work
This implementation did not work bc I was only looking in a predefined range where I thought only removing would affect the number, but I was wrong it is possible for that predefined set up to have a perfect setup and for the number to be removed past it.

public class Solution {
    /**
     *@param A: A positive integer which has N digits, A is a string.
     *@param k: Remove k digits.
     *@return: A string
     */
    public String DeleteDigits(String A, int k) {
        
        int[] arr = new int[k];
        PriorityQueue<Pair> heap = new PriorityQueue(k, new Comparator<Pair>(){
            @Override
            public int compare(Pair a, Pair b){
                if(a.c < b.c) return 1;
                else if(a.c > b.c) return -1;
                else return 0;
            }
        });
        
        for(int i = 0; i < 2*k && i < A.length(); i++) heap.offer(new Pair(i, A.charAt(i)));
        for(int i = 0; i < k; i++) arr[i] = heap.poll().index;
        Arrays.sort(arr);
        
        StringBuilder sb = new StringBuilder(A);
        for(int i = 0; i < k; i++) sb.deleteCharAt(arr[i] - i);
        //System.out.println(Arrays.toString(arr));
        
        return sb.toString();
    }
}