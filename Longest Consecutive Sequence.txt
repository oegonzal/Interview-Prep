//First Try:



public class Solution {
    /**
     * @param As: A list of integers
     * @return an integer
     */
    public int longestConsecutive(int[] A) {
        if(A == null || A.length == 0) return 0;
        
        HashMap<Integer, Node> map = new HashMap<Integer, Node>();
        Node n = null;
        int max = 1, sum = 0;
        
        for(int i = 0; i < A.length; i++){
            n = map.get(A[i] + 1);
            while(n!=null && n.parent != null) n=n.parent;
            
            n = new Node(1, n);
            map.put(A[i], n);
            
            if(map.containsKey(A[i]-1)){
                n = map.get(A[i] - 1);
                n.parent = map.get(A[i]);
            }
            
            sum = 0;
            while(n!=null && n.parent!=null){
                sum+=n.size;    
                n = n.parent;
            }
            
            sum+=n.size;
            n.size = sum;
            if(max<sum) max = sum;
        }
        return max;
    }
    
    class Node{
        public Node parent;
        public int size;
        
        public Node(int size, Node parent){
            this.parent = parent;
            this.size = size;
        }
    }
}

//[100,4,200,1,3,2]


public class Solution {
    /**
     * @param nums: A list of integers
     * @return an integer
     */
    public int longestConsecutive(int[] num) {
        if(num == null || num.length == 0) return 0;
        
        HashMap<Integer, Integer> map = HashMap<Integer, Integer>();
        Node parent = null, child = null, root = null;
        int max = 0;
        
        for(int i = 0; i < num.length; i++){
            
            parent = map.get(A[i] + 1);
            if(parent != null){
                map.put(A[i], new Node(parent.root, 0));
                map.put(parent.root, new Node(-1, map.get(parent.root).size+1));
            }
            
            child = map.get(A[i]-1);
            if(child != null){
                
            }
        }
    }
    
    class Node{
        public int root;
        public int size;
        
        public Node(int root, int size){
            this.root = root;
            this.size = size;
        }
    }
}