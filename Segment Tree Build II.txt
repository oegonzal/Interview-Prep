//First Try:
Total Runtime: 2616 ms
100% test cases passed.



/**
 * Definition of SegmentTreeNode:
 * public class SegmentTreeNode {
 *     public int start, end, max;
 *     public SegmentTreeNode left, right;
 *     public SegmentTreeNode(int start, int end, int max) {
 *         this.start = start;
 *         this.end = end;
 *         this.max = max
 *         this.left = this.right = null;
 *     }
 * }
 */
public class Solution {
    /**
     *@param A: a list of integer
     *@return: The root of Segment Tree
     */
    
    public static int[] vals;
    
    public SegmentTreeNode build(int[] A) {
        vals = A;
        return helper(0, A.length-1);
    }
    
    public SegmentTreeNode helper(int start, int end) {
        if(start > end) return null;
        
        SegmentTreeNode n = new SegmentTreeNode(start, end);
        if(start != end){
            n.left = helper(start, (start+end)/2);
            n.right = helper((start+end)/2 + 1, end);
            n.max = Math.max(n.left.max, n.right.max);
        }
        else n.max = vals[start];
        
        return n;
    }
}