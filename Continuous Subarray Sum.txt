//New Creation:

public class Solution {
    public ArrayList<Integer> continuousSubarraySum(int[] nums) {
        
        ArrayList<Integer> answer = new ArrayList<Integer>();
        if(nums.length == 0) return answer;

        int lSum = nums[0], min = nums[0], sum = nums[0], minInd = 0, maxInd = 0;
        for(int i = 1; i < nums.length; i++){
            sum += nums[i];
            if(sum < min){
                minInd = i;
                min = sum;
            }
            if(sum > lSum){
                maxInd = i;
                lSum = sum;
            }
            if(sum != min && sum - min > lSum){
                maxInd = i;
                lSum = sum - min;
            }
            if(nums[i] > lSum){
                maxInd = i;
                lSum = nums[i];
            }
        }
        
        answer.add(minInd);
        answer.add(maxInd);
        return answer;
    }
}



//Fourth Try:
Total Runtime: 11485 ms
100% test cases passed.

public class Solution {
    public ArrayList<Integer> continuousSubarraySum(int[] A) {
        
        ArrayList<Integer> answer = new ArrayList<Integer>();
        int min = Integer.MAX_VALUE,
            minInd = 0,
            tempMinInd = 0,
            max = Integer.MIN_VALUE,
            maxInd = 0,
            upSum = Integer.MIN_VALUE,
            maxVal = Integer.MIN_VALUE,
            maxValInd = 0,
            sum = 0,
            dist = 0;
        
        if(A.length == 0) return answer;

        for(int i = 0; i < A.length; i++){
            sum += A[i];
 
            //Absolute lowest point
            if(sum < min){
                min = sum;
                tempMinInd = i;
            }
            
            //Absolute highest point
            if(sum > max){
                max = sum;
                
                //Gets highest rise(keep in mind: i will always be bigger than minInd in this step)
                if( dist < max - min){
                    dist = max - min;
                    maxInd = i;
                    minInd = tempMinInd;
                }
            }
            
            //Dynamically grabs next highest point
            if(sum < max && sum > min){
                upSum = sum;
  
                //Gets highest rise(keep in mind: i will always be bigger than minInd in this step)
                if(dist < upSum - min){
                    dist = upSum - min;
                    maxInd = i;
                    minInd = tempMinInd;
                }
            }
            
            if(A[i] > maxVal){
                maxVal = A[i];
                maxValInd = i;
            }
        }
        
        //unless, there was no uptrend at all (minInd != maxInd), increment minInd bc it has a negative value
        if(minInd != maxInd){
            if(min > 0 && A[0] > min) minInd = 0;
            else if(A[minInd] < 0) minInd++;
        }
        else{
            minInd = maxInd = maxValInd;
        }
        
        answer.add(minInd);
        answer.add(maxInd);
        return answer;
    }
}

//Third Try:
Total Runtime: 14559 ms
95% test cases passed.

public class Solution {
    public ArrayList<Integer> continuousSubarraySum(int[] A) {
        
        ArrayList<Integer> answer = new ArrayList<Integer>();
        int min = Integer.MAX_VALUE,
            minInd = 0,
            tempMinInd = 0,
            max = Integer.MIN_VALUE,
            tempMax = Integer.MIN_VALUE,
            maxInd = 0,
            sum = 0,
            dist = 0;
        
        if(A.length == 0) return answer;

        for(int i = 0; i < A.length; i++){
            sum += A[i];
            // System.out.println(i + "----------------");
            
            //Absolute lowest point
            if(sum < min){
                min = sum;
                tempMinInd = i;
                
                // System.out.println(" MIN: ");
                // System.out.println(" min: " + min);
                // System.out.println();
            }
            
            //Absolute highest point
            if(sum > max){
                max = sum;
                
                // System.out.print(" MAX: ");
                // System.out.println((dist < max - min));
                //Gets highest rise(keep in mind: i will always be bigger than minInd in this step)
                if( dist < max - min){
                    dist = max - min;
                    maxInd = i;
                    minInd = tempMinInd;
                }
                
                // System.out.println(" max: " + max);
                // System.out.println(" dist: " + dist);
                // System.out.println();
            }
            
            //Dynamically grabs next highest point
            if(sum < max && sum > min){
                tempMax = sum;
                
                // System.out.print(" TEMPMAX: ");
                // System.out.println((dist < tempMax - min));
                //Gets highest rise(keep in mind: i will always be bigger than minInd in this step)
                if(dist < tempMax - min){
                    dist = tempMax - min;
                    maxInd = i;
                    minInd = tempMinInd;
                }
                
                // System.out.println(" tempMax: " + tempMax);
                // System.out.println(" dist: " + dist);
                // System.out.println();
            }
        }
        
        //unless, there was no uptrend at all (minInd != maxInd), increment minInd bc it has a negative value
        if(minInd != maxInd){
            if(min > 0 && A[0] > min) minInd = 0;
            else if(A[minInd] < 0) minInd++;
        }
        
        answer.add(minInd);
        answer.add(maxInd);
        
        return answer;
    }
}


//Second try:
Total Runtime: 8735 ms
61% test cases passed.

public class Solution {
    /**
     * @param A an integer array
     * @return  A list of integers includes the index of the first number and the index of the last number
     */
    public ArrayList<Integer> continuousSubarraySum(int[] A) {
        
        ArrayList<Integer> answer = new ArrayList<Integer>();
        int min = Integer.MAX_VALUE,
            minInd = 0,
            tempMinInd = 0,
            max = Integer.MIN_VALUE,
            tempMax = Integer.MIN_VALUE,
            maxInd = 0,
            sum = 0,
            dist = 0;
        
        if(A.length == 0) return answer;
        
        for(int i = 0; i < A.length; i++){
            sum += A[i];
            
            //Absolute lowest point
            if(sum < min){
                min = sum;
                if(A[i] >= 0) tempMinInd = i;
                else if(i + 1 != A.length ) tempMinInd = i + 1;
            }
            
            //Absolute highest point
            if(sum > max){
                max = sum;
                
                //Gets highest rise(keep in mind: i will always be bigger than minInd in this step)
                if( dist < max - min){
                    dist = max - min;
                    maxInd = i;
                    minInd = tempMinInd;
                }
            }
            
            //Dynamically grabs next highest point
            if(sum < max && sum > tempMax){
                tempMax = sum;
                
                //Gets highest rise(keep in mind: i will always be bigger than minInd in this step)
                if(dist < tempMax - min){
                    dist = tempMax - min;
                    maxInd = i;
                    minInd = tempMinInd;
                }
            }
        }
        
        answer.add(minInd);
        answer.add(maxInd);
        
        return answer;
    }
}



//First Try:
Total Runtime: 13005 ms
85% test cases passed.

public class Solution {
    /**
     * @param A an integer array
     * @return  A list of integers includes the index of the first number and the index of the last number
     */
    public ArrayList<Integer> continuousSubarraySum(int[] A) {
        
        ArrayList<Integer> answer = new ArrayList<Integer>();
        int minInd = Integer.MAX_VALUE,  maxInd = Integer.MIN_VALUE, sum = 0, max = Integer.MIN_VALUE;
        
        if(A.length == 0) return answer;
        
        for(int i = 0; i < A.length; i++){
            sum = 0;
            for(int j = i; j < A.length; j++){
                sum += A[j];
                
                if(sum > max){
                    max = sum;
                    minInd = i;
                    maxInd = j;
                }
            }
        }
        
        answer.add(minInd);
        answer.add(maxInd);
        return answer;
    }
    
    public void helper(){
        
    }
}

/*
    Find the biggest contiguous stream.
    

    if negative, count it and track its index
    track continuous streak of non-negatives
    find population of biggest mass of positives
    
    Recursion:
    Try all possible index combinations


*/