//Took a few submissions to get it to be successful, each time I had to make minor tweaks for corner cases.
I thought of the general algorithm pretty fast (15 mins) But the corner cases were hard to get. Overall I spent
about 2 hours on it, not continuously and not fully focusing.

//After/Small optimization
Total Runtime: 20562 ms
100% test cases passed.

public class Solution {
    /**
     * @param dividend the dividend
     * @param divisor the divisor
     * @return the result
     */
    public int divide(int dividend, int divisor) {
        if(divisor == 0) return 2147483647;
        
        int val = -Math.abs(divisor), count = 1, lastCount = 1,
            isPos = (dividend < 0 && divisor > 0) || (dividend > 0 && divisor < 0) ? -1 : 1;
        dividend = -Math.abs(dividend);
        divisor = -Math.abs(divisor);
        
        if(dividend == 0 || dividend > divisor) return 0;
        LinkedList<Integer> stack = new LinkedList<Integer>();
        stack.addLast(divisor);
        
        while(stack.size() > 0){
            int lastVal = stack.peekLast();
            if(val + lastVal >= dividend && -2147483648 - lastVal <= val) {
                count += lastCount;
                val += lastVal;
                lastCount *= 2;
                stack.addLast(lastVal*2);
            }
            else {
                lastCount /= 2;
                stack.removeLast();
            }
        }
        return (count == -2147483648 && isPos == 1)? 2147483647 : count * isPos;
    }
}


//Before Optimization
Total Runtime: 25476 ms
100% test cases passed.

public class Solution {
    /**
     * @param dividend the dividend
     * @param divisor the divisor
     * @return the result
     */
    public int divide(int dividend, int divisor) {
        if(divisor == 0) return 2147483647;
        
        int val = -Math.abs(divisor), count = 1, 
            isPos = (dividend < 0 && divisor > 0) || (dividend > 0 && divisor < 0) ? -1 : 1;
        dividend = -Math.abs(dividend);
        divisor = -Math.abs(divisor);
        
        if(dividend == 0 || dividend > divisor) return 0;
        LinkedList<Pair> stack = new LinkedList<Pair>();
        stack.addLast(new Pair(divisor, 1));
        
        while(stack.size() > 0){
            Pair last = stack.peekLast();
            if(val + last.val >= dividend && -2147483648 - last.val <= val) {
                count += last.count;
                val += last.val;
                stack.addLast(new Pair(last.val + last.val, last.count + last.count));
            }
            else stack.removeLast();
        }
        
        return (count == -2147483648 && isPos == 1)? 2147483647 : count * isPos;
    }
    
    class Pair{
        public int val;
        public int count;
        public Pair(int val, int count){
            this.val = val;
            this.count = count;
        }
    }
}

//-2147483648, -1
//-2147483648, 1

//2147483647, -1
//2147483647, 1