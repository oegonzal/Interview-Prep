//Took a few submissions but all the tweaks I made were minor no big changes to my code
It wook mae about an hour to finish this problem but not in one sitting.
Total Runtime: 1848 ms
100% test cases passed.

I solved this by turing all ints in the array into first tenth place unit decimals.
I put all these value in a maxHeap that stored a Pair of the float value and the original place in the
index of the val. I realized I had to make a special case for single numbers.
For single number say x, I had to convert it to x.xxxxx so that they could be placed appropriated 
in the string and make the biggest number. 
This algorithm works because it always grabs largest ordered numbrs and puts them in the front.
Single numbers are tricky because they can be repeated over and over again in a sequence. 
We have to know how to choose which comes first a "7" or a "778". Obviously the "778" would need to come
first, so the way we make this possible is by converting the "7" to as "7.777777" and this guarantees us 
that we will get the correct orderings in any situation.


public class Solution {
    /**
     *@param num: A list of non negative integers
     *@return: A string
     */
    public String largestNumber(int[] num) {
        String ans = "";
        if(num == null || num.length == 0) return ans;
        
        Queue<Pair> maxHeap = new PriorityQueue<Pair>(num.length, new Comparator<Pair>(){
            @Override
            public int compare(Pair o1, Pair o2){
                if(o1.val > o2.val) return -1;
                else if(o1.val < o2.val) return 1;
                else return 0;
            }
        });
        
        for(int i = 0; i < num.length; i++) maxHeap.offer(new Pair(subTenAndSuperZero(num[i]), i));
        if(maxHeap.peek().val == 0) return "0";
        for(int i = 0; i < num.length; i++) ans += num[maxHeap.poll().index];
        return ans;
    }
    
    public float subTenAndSuperZero(int num){
        if(num > 0 && num < 10){
            float newNum = num;
            for(int i = 0; i < 8; i++){
                newNum *= 10;
                newNum += num;
            }
            return newNum/100000000;
        }
        
        float n = num;
        while(n >= 10.0) n /= 10;
        return n;
    }
    class Pair{
        public float val;
        public int index;
        public Pair(float value, int index){
            this.val = value;
            this.index = index;
        }
    }
}

//[3577,9155,9352,7911,1622]
//[41,23,87,55,50,53,18,9,39,63,35,33,54,25,26,49,74,61,32,81,97,99,38,96,22,95,35,57,80,80,16,22,17,13,89,11,75,98,57,81,69,8,10,85,13,49,66,94,80,25,13,85,55,12,87,50,28,96,80,43,10,24,88,52,16,92,61,28,26,78,28,28,16,1,56,31,47,85,27,30,85,2,30,51,84,50,3,14,97,9,91,90,63,90,92,89,76,76,67,55]