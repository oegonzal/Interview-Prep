//First Submission (with help)
Total Runtime: 1787 ms
100% test cases passed.



public class Solution {
    /**    
     * @param A: an array of integers
     * @return: an integer
     */
    public int firstMissingPositive(int[] A) {
        if(A == null || A.length == 0) return 1;
        
        int k = partition(A, 0) + 1, firstMissing = k, temp = 0;
        
        for(int i = 0; i < k; i++){
            temp = Math.abs(A[i]);
            if(temp <= k){
                A[temp - 1] = (A[temp - 1] < 0) ? A[temp - 1] : -A[temp - 1];
            }
        }

        for(int i = 0; i < k; i++){
            if(A[i] > 0){
                firstMissing = i;
                break;
            }
        }
        
        return firstMissing + 1;
    }
    
    public int partition(int[] A, int target){
        int p = -1;
        for(int i = 0; i < A.length; i++){
            if(A[i] > target){
                p++;
                swap(A, p, i);
            }
        }
        return p;
    }
    public void swap(int[] A, int i, int j){
        if(i != j){
            A[i] ^= A[j];
            A[j] ^= A[i];
            A[i] ^= A[j];
        }
    }
}