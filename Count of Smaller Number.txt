//Second Try:
Total Runtime: 4867 ms
100% test cases passed.



public class Solution {
   /**
     * @param A: An integer array
     * @return: The number of element in the array that 
     *          are smaller that the given integer
     */
    public ArrayList<Integer> countOfSmallerNumber(int[] A, int[] queries) {
        ArrayList<Integer> answer = new ArrayList<Integer>();
        Node root = new Node(0,0,0);
        if(A==null || queries==null || queries.length==0) return answer;

        if(A.length != 0){
            Arrays.sort(A);
            root = buildSegmentTree(A, 0, A.length-1);
            for(int i = 0; i < queries.length; i++){
                int num = queries[i];
                answer.add(queryTree(A, root, A[0], num-1));
            }
        }
        else{
            for(int i = 0; i < queries.length; i++) answer.add(0);
        }
        return answer;
    }
    
    public Node buildSegmentTree(int[] A, int start, int end){
        Node n = new Node(end - start + 1, start, end);
        if(start == end) return n;
    
        int mid = (start+end)/2;
        n.left = buildSegmentTree(A, start, mid);
        n.right = buildSegmentTree(A, mid+1, end);
        return n;
    }
    
    public int queryTree(int[] A, Node n, int minNum, int currNum){

        if(minNum > currNum) return 0;
        if(A[n.start]==minNum && A[n.end]==currNum || currNum>A[n.end]) return n.count;
        
        int count = 0;
        if(currNum < A[n.left.end])
            count += queryTree(A, n.left, minNum, currNum);
        else {
            count += queryTree(A, n.left, minNum, A[n.left.end]);
            count += queryTree(A, n.right, A[n.right.start], currNum);
        }
        return count;
    }
    
    class Node{
        public int count; //number of nodes between start and end
        public int start;
        public int end;
        public Node left, right;
        
        public Node(int count, int start, int end){
            this.count = count; 
            this.start = start;
            this.end = end;
            this.left = this.right = null;
        }
    }
}


//[1,2,3,4,5,6], [1,2,3,4]
//[32,67], [65,50]
//[], [86,59,39]
//[1,2,3], []
//[30,87,56,25,36,69,47,49,28,3,59,61,16,63,77,63,83,27,15,31,38,81,45,4,93,16,82,24,12,99,18,21,44,69,60,60,86,19,88,62,86,98,58,53,35,24,59,46,67,21], [11,39,89,46,1,70,65,93,71,7]






//First Try:



public class Solution {
   /**
     * @param A: An integer array
     * @return: The number of element in the array that 
     *          are smaller that the given integer
     */
    public ArrayList<Integer> countOfSmallerNumber(int[] A, int[] queries) {
        ArrayList<Integer> answer = new ArrayList<Integer>();
        if(A==null || A.length==0 || queries==null || queries.length==0) return answer;
        
        Arrays.sort(A);
        Node root = buildSegmentTree(A, 0, A.length-1);
        
        for(int i = 0; i < queries.length; i++){
            int num = queries[i];
            int q = queryTree(A, root, A[0], num);
            answer.add(q);
            //System.out.println(q + "\n");
        }
        
        //System.out.println("start: "+ root.left.start + " end: " + root.left.end);
        
        
        return answer;
    }
    
    public Node buildSegmentTree(int[] A, int start, int end){
        Node n = new Node(end - start + 1, start, end);
        if(start == end) return n;
    
        int mid = (start+end)/2;
        n.left = buildSegmentTree(A, start, mid);
        n.right = buildSegmentTree(A, mid+1, end);
        return n;
    }
    
    public int queryTree(int[] A, Node n, int minNum, int currNum){
        //System.out.println("count: " + n.count + ", start: "+ A[n.start] + ", end: " + A[n.end] + ", minNum: " + minNum + ", currNum: " + currNum);
        
        if(minNum > currNum) return 0;
        if(A[n.start] == minNum && A[n.end] == currNum) return n.count;
        
        int count = 0;
        if(n.left != null && currNum <= A[n.left.end])
            count += queryTree(A, n.left, minNum, currNum);
        else if(n.right != null && currNum <= A[n.right.end]) {
            //if(currNum >= A[n.end]) return n.count + 1;
            //System.out.println("Node: " + n.count);
            count += queryTree(A, n.left, minNum, A[n.left.end]);
            count += queryTree(A, n.right, A[n.right.start], currNum);
            //System.out.println("Count: " + count);
        }
        else count = n.count;
        return count;
    }
    
    class Node{
        public int count; //number of nodes between start and end
        public int start;
        public int end;
        public Node left, right;
        
        public Node(int count, int start, int end){
            this.count = count; 
            this.start = start;
            this.end = end;
            this.left = this.right = null;
        }
    }
}


//[1,2,3,4,5,6], [1,2,3,4]
//[32,67], [65,50]








//First Implementation:



public class Solution {
   /**
     * @param A: An integer array
     * @return: The number of element in the array that 
     *          are smaller that the given integer
     */
    public ArrayList<Integer> countOfSmallerNumber(int[] A, int[] queries) {
        ArrayList<Integer> answer = new ArrayList<Integer>();
        if(A==null || A.length==0 || queries==null || queries.length==0) return answer;
        
        Arrays.sort(A);
        Node root = buildSegmentTree(A, 0, A.length-1);
        
        for(int i = 0; i < queries.length; i++){
            int num = queries[i];
            answer.add(queryTree(root, A[0], num));
        }
        return answer;
    }
    
    public Node buildSegmentTree(int[] A, int start, int end){
        
        if(start>end) return null;
        Node n = new Node(start + end + 1, start, end);
        
        if(start == end) return n;
        
        int mid = (start+end)/2;
        n.left = buildSegmentTree(A, start, mid);
        n.right = buildSegmentTree(A, mid+1, end);
        
        return n;
    }
    
    public int queryTree(Node n, int minNum, int currNum){
        if(n.start == minNum && n.end == currNum) return n.count;
        
        int count = 0;
        if(n.left != null && currNum <= n.left.end){
            count += queryTree(n.left, minNum, currNum);
        }
        else{ //if(n.right != null && num >= n.right.start){
            count += queryTree(n.left, minNum, n.left.end);
            count += queryTree(n.right, n.right.start, currNum);
        }
        
        return count;
    }
    
    class Node{
        public int count; //number of nodes between start and end
        public int start;
        public int end;
        public Node left, right;
        
        public Node(int count, int start, int end){
            this.count = count; 
            this.start = start;
            this.end = end;
            this.left = this.right = null;
        }
    }
}
