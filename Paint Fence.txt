//Successful submission (Second after looking up online)
Total Runtime: 7446 ms
100% test cases passed.

This is a dynamic programming solution and should be much faster but I don't know
why the time differences aren't by that much...

I like this one because all it does is
get the all possible same color pairs 
and all the non same color pairs, and adds them to return the answer.
But if we are prepping it for the next iteration then we have to multiply k-1
to the previous all possible solution because they can all have k-1 more different ways
to be different colors at the end. 
The tricky part here is being able to do sameColor at the end possibilites.
What we do here is get last iterations all diffColors and multiply those by only one
because one color is the only way to pick sameColor possibilities. In addition we are
getting the diffColor because in order to count valid possibilites we can only have 
adjacent possibilites of at most 2 colors together, so we have to make sure last pairing
was differentColor pairings.


public class Solution {
    /**
     * @param n non-negative integer, n posts
     * @param k non-negative integer, k colors
     * @return an integer, the total number of ways
     */
    public int numWays(int n, int k) {
        if(n <= 0 || k <= 0) return 0;
        else if(n == 1) return k;
        else{
            int diffColor = k*(k-1);
            int sameColor = k*1;
            
            for(int i = 2; i < n; i++){
                int temp = diffColor;
                diffColor = (diffColor + sameColor) * (k-1);
                sameColor = temp*1;
            }
            
            return diffColor + sameColor;
        }
    }
}



//Successful Submission in 12/15
Total Runtime: 7924 ms
100% test cases passed.


public class Solution {
    /**
     * @param n non-negative integer, n posts
     * @param k non-negative integer, k colors
     * @return an integer, the total number of ways
     */
    public int numWays(int n, int k) {
        if(n <= 0 || k <= 0) return 0;
        return getTotalWays(n, k, -1, -1);
    }
    
    public int getTotalWays(int n, int k, int prevPrevColor, int prevColor){
        if(n == 0) return 1;
        int count = 0;
        for(int i = 1; i <= k; i++){
            if(prevPrevColor == prevColor && prevColor == i) continue;
            count += (getTotalWays(n-1, k, prevColor, i));
        }
        return count;
    }
}