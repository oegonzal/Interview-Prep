//Second Try:
Total Runtime: 12956 ms
100% test cases passed.

public class Solution {
    /**
     * @param a a number
     * @param b a number
     * @return the result
     */
    public String addBinary(String a, String b) {
        
        int num = strBinaryToInt(a) + strBinaryToInt(b);
        
        StringBuilder answer = new StringBuilder();
        ArrayList<Integer> pos = new ArrayList<Integer>();
        while(num > 1){
            int twoMul = 1, count = 0, temp = num;
            while(temp > 1){
                count++;
                twoMul *= 2;
                if(temp - twoMul < 0){
                    break;
                }
                temp -= twoMul;
            }
            pos.add(count);
            num -= twoMul;
        }
        pos.add(0);
        
        for(int i = 1; i < pos.size(); i++){
            answer.append(1);

            int numZeros = pos.get(i-1) - pos.get(i);
            for(int j = 0; j < numZeros-1; j++){
                answer.append(0);
            }
        }
        answer.append(num);
        return answer.toString();
    }
    public int strBinaryToInt(String a){
        int num = 0;
        for(int i = a.length() - 1; i >= 0; i--){
            int twoMul = 1;
            for(int j = 0; j < a.length() - i - 1; j++ ){
                twoMul *= 2;
            }
            num += (int)((a.charAt(i) - '0') * twoMul);
        }
        return num;
    }
}



//First Try: Failed submission

public class Solution {
    /**
     * @param a a number
     * @param b a number
     * @return the result
     */
    public String addBinary(String a, String b) {
        // Write your code here

        int carrBit = 0;
        
        int strLen = a.length();
        int strLen2 = b.length();
        
        int lenS = (strLen > strLen2) ? strLen2 : strLen;
        int lenB = (strLen > strLen2) ? strLen : strLen2;
        boolean aBigger = (strLen > strLen2) ? true : false;
        
        char [] arr1 = a.toCharArray();
        char [] arr2 = b.toCharArray();
        char [] arr = new char[lenB + 1];
        
        int i = 0;
        for(i = 0; i < lenS; i++ ) {
            
            int x = Character.getNumericValue((arr1[strLen - 1 - i])) + Character.getNumericValue((arr2[strLen2 - 1 - i])) + carrBit;
            //System.out.print( (arr1[strLen - 1 - i]) + " " + (arr2[strLen2 - 1 - i]) + " " + x + ", ");
            System.out.println(x + ", ");
            
            if(x == 0){
                carrBit = 0;
                arr[lenB - i] = '0';
            }
            else if(x == 1) {
                carrBit = 0;
                arr[lenB - i] = '1';
            }
            else if(x == 2) {
                carrBit = 1;
                arr[lenB - i] = '0';
            }
            else if(x == 3) {
                carrBit = 1;
                arr[lenB - i] = '1';
            }
        }
        System.out.print(arr.length + lenB);
        System.out.print("-" + arr[0] + "-" + arr[1] + "-" + arr[2] + "-" + arr[3] );
        
        for(int j = i; j < lenB; j++) {
            if(aBigger) {
                //use a
                int x = (int)(arr1[strLen- 1 - i])  + carrBit;
                
                if(x == 0 ) {
                    carrBit = 0;
                    arr[lenB - j] = '0';
                }
                else if(x == 1) {
                    carrBit = 0;
                    arr[lenB - j] = '1';
                }
                else if(x == 2) {
                    carrBit = 1;
                    arr[lenB - j] = '1';
                }
            }
            else {
                //use b
                int x =  (int)(arr2[strLen2 - 1 - i]) + carrBit;
                
                if(x == 0 ) {
                    carrBit = 0;
                    arr[lenB - j] = '0';
                }
                else if(x == 1) {
                    carrBit = 0;
                    arr[lenB - j] = '1';
                }
                else if(x == 2) {
                    carrBit = 1;
                    arr[lenB - j] = '1';
                }
                
            }    
        }
        
        
        return new String(arr);
        
    }
}