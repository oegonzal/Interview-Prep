https://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript

https://www.toptal.com/javascript/comprehensive-guide-javascript-design-patterns


Gang of Four book Design Patterns: Elements of Reusable Object-Oriented Software and Addy Osmani’s Learning JavaScript Design Patterns.

Mediator pattern (vs event aggregator pattern)
-   Used to store workflow of different libraries or modules
-   When 2 modules have a lot of interactions with eachother, you shouldn't start referencing eachother 
    within their logic 
-   But rather, there should be a "mediator" that takes in their events + encapsulates their workflow






Anti patterns:
Modifying the Object class prototype. Almost all objects in JavaScript inherit from Object (remember that JavaScript 
uses prototype-based inheritance) so imagine a scenario where you altered this prototype. Changes to the Object 
prototype would be seen in all of the objects that inherit from this prototype—which would be most JavaScript objects.

Modifying objects that you don’t own. An example of this would be overriding a function from an object used in 
many scenarios throughout the application. If you are working with a large team, imagine the confusion this would 
cause; you’d quickly run into naming collisions, incompatible implementations, and maintenance nightmares.



Design Pattern Categorization
Design patterns can be categorized in multiple ways, but the most popular one is the following:

Creational design patterns
Structural design patterns
Behavioral design patterns
Concurrency design patterns
Architectural design patterns





Creational Design Patterns
These patterns deal with object creation mechanisms which optimize object creation compared to a basic approach. 
The basic form of object creation could result in design problems or in added complexity to the design. Creational 
design patterns solve this problem by somehow controlling object creation. Some of the popular design patterns 
in this category are:

Factory method
Abstract factory
Builder
Prototype
Singleton




Structural Design Patterns
These patterns deal with object relationships. They ensure that if one part of a system changes, the entire system 
doesn’t need to change along with it. The most popular patterns in this category are:

Adapter
Bridge
Composite
Decorator
Facade
Flyweight
Proxy




Behavioral Design Patterns
These types of patterns recognize, implement, and improve communication between disparate objects in a system. 
They help ensure that disparate parts of a system have synchronized information. Popular examples of these patterns are:

Chain of responsibility
Command
Iterator
Mediator
Memento
Observer
State
Strategy
Visitor



Concurrency Design Patterns
These types of design patterns deal with multi-threaded programming paradigms. Some of the popular ones are:

Active object
Nuclear reaction
Scheduler




Architectural Design Patterns
Design patterns which are used for architectural purposes. Some of the most famous ones are:

MVC (Model-View-Controller)
MVP (Model-View-Presenter)
MVVM (Model-View-ViewModel)





******
Remember, applying the wrong pattern to a given problem could lead to undesirable 
effects such as unnecessary code complexity, unnecessary overhead on performance, or even the spawning 
of a new anti-pattern.







Constructor Pattern

We mentioned earlier that JavaScript doesn’t support native classes, but it does support constructors through the 
use of a “new” keyword prefixed to a function call. This way, we can use the function as a constructor and initialize 
its properties the same way we would with a classic language constructor.

Example:

    // we define a constructor for Person objects
    function Person(name, age, isDeveloper) {
        this.name = name;
        this.age = age;
        this.isDeveloper = isDeveloper || false;

        this.writesCode = function() {
        console.log(this.isDeveloper? "This person does write code" : "This person does not write code");
        }
    }

    // creates a Person instance with properties name: Bob, age: 38, isDeveloper: true and a method writesCode
    var person1 = new Person("Bob", 38, true);
    // creates a Person instance with properties name: Alice, age: 32, isDeveloper: false and a method writesCode
    var person2 = new Person("Alice", 32);

    // prints out: This person does write code
    person1.writesCode();
    // prints out: this person does not write code
    person2.writesCode();


The problem with the previous approach is that the method writesCode gets redefined for each of the instances of the 
Person constructor. We can avoid this by setting the method into the function prototype:


Example:

    // we define a constructor for Person objects
    function Person(name, age, isDeveloper) {
        this.name = name;
        this.age = age;
        this.isDeveloper = isDeveloper || false;
    }

    // we extend the function's prototype
    Person.prototype.writesCode = function() {
        console.log(this.isDeveloper? "This person does write code" : "This person does not write code");
    }

    // creates a Person instance with properties name: Bob, age: 38, isDeveloper: true and a method writesCode
    var person1 = new Person("Bob", 38, true);
    // creates a Person instance with properties name: Alice, age: 32, isDeveloper: false and a method writesCode
    var person2 = new Person("Alice", 32);

    // prints out: This person does write code
    person1.writesCode();
    // prints out: this person does not write code
    person2.writesCode();


Now, both instances of the Person constructor can access a shared instance of the writesCode() method.








Module Pattern

As far as peculiarities go, JavaScript never ceases to amaze. Another peculiar thing to JavaScript (at least as 
far as object-oriented languages go) is that JavaScript does not support access modifiers. In a classical OOP
language, a user defines a class and determines access rights for its members. Since JavaScript in its plain form 
supports neither classes nor access modifiers, JavaScript developers figured out a way to mimic this behavior when needed




A closure is a function with access to the parent scope, even after the parent function has closed. They help us 
mimic the behavior of access modifiers through scoping.



Example:

    // we  used an immediately invoked function expression
    // to create a private variable, counter
    var counterIncrementer = (function() {
        var counter = 0;

        return function() {
            return ++counter;
        };
    })();

    // prints out 1
    console.log(counterIncrementer());
    // prints out 2
    console.log(counterIncrementer());
    // prints out 3
    console.log(counterIncrementer());


As you can see, by using the IIFE, we have tied the counter variable to a function which was invoked and closed but 
can still be accessed by the child function that increments it. Since we cannot access the counter variable from outside 
of the function expression, we made it private through scoping manipulation.


Using the closures, we can create objects with private and public parts. These are called modules and are very useful 
whenever we want to hide certain parts of an object and only expose an interface to the user of the module. Let’s show 
this in an example:


Example:

    // through the use of a closure we expose an object
    // as a public API which manages the private objects array
    var collection = (function() {
        // private members
        var objects = [];

        // public members
        return {
            addObject: function(object) {
                objects.push(object);
            },
            removeObject: function(object) {
                var index = objects.indexOf(object);
                if (index >= 0) {
                    objects.splice(index, 1);
                }
            },
            getObjects: function() {
                return JSON.parse(JSON.stringify(objects));
            }
        };
    })();

    collection.addObject("Bob");
    collection.addObject("Alice");
    collection.addObject("Franck");
    // prints ["Bob", "Alice", "Franck"]
    console.log(collection.getObjects());
    collection.removeObject("Alice");
    // prints ["Bob", "Franck"]
    console.log(collection.getObjects());


IMPORTANT:
However, not everything is so perfect. When you wish to change the visibility of a member, you need to modify the 
code wherever you have used this member because of the different nature of accessing public and private parts.
Also, methods added to the object after their creation cannot access the private members of the object.






Revealing Module Pattern
This pattern is an improvement made to the module pattern as illustrated above. The main difference is that we write 
the entire object logic in the private scope of the module and then simply expose the parts we want to be public by 
returning an anonymous object. We can also change the naming of private members when mapping private members to their 
corresponding public members.


Example: 
    // we write the entire object logic as private members and
    // expose an anonymous object which maps members we wish to reveal
    // to their corresponding public members
    var namesCollection = (function() {
        // private members
        var objects = [];

        function addObject(object) {
            objects.push(object);
        }

        function removeObject(object) {
            var index = objects.indexOf(object);
            if (index >= 0) {
                objects.splice(index, 1);
            }
        }

        function getObjects() {
            return JSON.parse(JSON.stringify(objects));
        }

        // public members
        return {
            addName: addObject,
            removeName: removeObject,
            getNames: getObjects
        };
    })();

    namesCollection.addName("Bob");
    namesCollection.addName("Alice");
    namesCollection.addName("Franck");
    // prints ["Bob", "Alice", "Franck"]
    console.log(namesCollection.getNames());
    namesCollection.removeName("Alice");
    // prints ["Bob", "Franck"]
    console.log(namesCollection.getNames());

However, it may prove fragile in certain scenarios, like using RMP objects as prototypes in an inheritance chain. 
The problematic situations are the following:

    1. If we have a private function which is referring to a public function, we cannot override the public function, 
        as the private function will continue to refer to the private implementation of the function, thus introducing a 
        bug into our system.
    2. If we have a public member pointing to a private variable, and try to override the public member from outside 
        the module, the other functions would still refer to the private value of the variable, introducing a bug into 
        our system.


Singleton Pattern

Example:
    var singleton = (function() {
        // private singleton value which gets initialized only once
        var config;

        function initializeConfiguration(values){
            this.randomNumber = Math.random();
            values = values || {};
            this.number = values.number || 5;
            this.size = values.size || 10;
        }

        // we export the centralized method for retrieving the singleton value
        return {
            getConfig: function(values) {
                // we initialize the singleton value only once
                if (config === undefined) {
                    config = new initializeConfiguration(values);
                }

                // and return the same config value wherever it is asked for
                return config;
            }
        };
    })();

    var configObject = singleton.getConfig({ "size": 8 });
    // prints number: 5, size: 8, randomNumber: someRandomDecimalValue
    console.log(configObject);
    var configObject1 = singleton.getConfig({ "number": 8 });
    // prints number: 5, size: 8, randomNumber: same randomDecimalValue as in first config
    console.log(configObject1);


It is important to note that the access point for retrieving the singleton value needs to be 
only one and very well known. A downside to using this pattern is that it is rather difficult to test.








Observer Pattern


The observer pattern is a very useful tool when we have a scenario where we need to improve the communication 
between disparate parts of our system in an optimized way. It promotes loose coupling between objects.




However, there is a variation of this pattern called the publisher/subscriber pattern, which I am going to use as an 
example in this section. The main difference between a classical observer pattern and the publisher/subscriber pattern 
is that publisher/subscriber promotes even more loose coupling then the observer pattern does.



Example:

    var publisherSubscriber = {};

    // we send in a container object which will handle the subscriptions and publishings
    (function(container) {
        // the id represents a unique subscription id to a topic
        var id = 0;

        // we subscribe to a specific topic by sending in
        // a callback function to be executed on event firing
        container.subscribe = function(topic, f) {
            if (!(topic in container)) {
            container[topic] = [];
            }

            container[topic].push({
                "id": ++id,
                "callback": f
            });

            return id;
        }

        // each subscription has its own unique ID, which we use
        // to remove a subscriber from a certain topic
        container.unsubscribe = function(topic, id) {
            var subscribers = [];
            for (var subscriber of container[topic]) {
                if (subscriber.id !== id) {
                    subscribers.push(subscriber);
                }
            }
            container[topic] = subscribers;
        }

        container.publish = function(topic, data) {
            for (var subscriber of container[topic]) {
                // when executing a callback, it is usually helpful to read
                // the documentation to know which arguments will be
                // passed to our callbacks by the object firing the event
                subscriber.callback(data);
            }
        }

    })(publisherSubscriber);

    var subscriptionID1 = publisherSubscriber.subscribe("mouseClicked", function(data) {
        console.log("I am Bob's callback function for a mouse clicked event and this is my event data: " + JSON.stringify(data));
    });

    var subscriptionID2 = publisherSubscriber.subscribe("mouseHovered", function(data) {
        console.log("I am Bob's callback function for a hovered mouse event and this is my event data: " + JSON.stringify(data));
    });

    var subscriptionID3 = publisherSubscriber.subscribe("mouseClicked", function(data) {
        console.log("I am Alice's callback function for a mouse clicked event and this is my event data: " + JSON.stringify(data));
    });

    // NOTE: after publishing an event with its data, all of the
    // subscribed callbacks will execute and will receive
    // a data object from the object firing the event
    // there are 3 console.logs executed
    publisherSubscriber.publish("mouseClicked", {"data": "data1"});
    publisherSubscriber.publish("mouseHovered", {"data": "data2"});

    // we unsubscribe from an event by removing the subscription ID
    publisherSubscriber.unsubscribe("mouseClicked", subscriptionID3);

    // there are 2 console.logs executed
    publisherSubscriber.publish("mouseClicked", {"data": "data1"});
    publisherSubscriber.publish("mouseHovered", {"data": "data2"});

This design pattern is useful in situations when we need to perform multiple operations on a 
single event being fired. Imagine you have a scenario where we need to make multiple AJAX calls to a 
back-end service and then perform other AJAX calls depending on the result. You would have to nest the 
AJAX calls one within the other, possibly entering into a situation known as callback hell. Using the 
publisher/subscriber pattern is a much more elegant solution.

A downside to using this pattern is difficult testing of various parts of our system. There is no 
elegant way for us to know whether or not the subscribing parts of the system are behaving as expected.










Mediator Pattern

We will briefly cover a pattern which is also very useful when talking about decoupled systems. When we 
have a scenario where multiple parts of a system need to communicate and be coordinated, perhaps a good 
solution would be to introduce a mediator.



A mediator is an object which is used as a central point for communication between disparate parts of a 
system and handles the workflow between them. Now, it is important to stress out that it handles workflow. 
Why is this important?


Because there is a large similarity with the publisher/subscriber pattern. You might ask yourself, OK, so 
these two patterns both help implement better communication between objects… What is the difference?


The difference is that a mediator handles the workflow, whereas the publisher/subscriber uses something called 
a “fire and forget” type of communication. The publisher/subscriber is simply an event aggregator, meaning it 
simply takes care of firing the events and letting the correct subscribers know which events were fired. The 
event aggregator does not care what happens once an event was fired, which is not the case with a mediator.




A nice example of a mediator is a wizard type of interface. Let’s say you have a large registration process for a 
system you have worked on. Oftentimes, when a lot of information is required from a user, it is a good practice to 
break this down into multiple steps.




This way, the code will be a lot cleaner (easier to maintain) and the user isn’t overwhelmed by the amount of 
information which is requested just in order to finish the registration. A mediator is an object which would 
handle the registration steps, taking into account different possible workflows that might happen due to the 
fact that each user could potentially have a unique registration process.



The obvious benefit from this design pattern is improved communication between different parts of a system, 
which now all communicate through the mediator and cleaner codebase.

A downside would be that now we have introduced a single point of failure into our system, meaning if our 
mediator fails, the entire system could stop working.



Prototype Pattern
As we have already mentioned throughout the article, JavaScript does not support classes in its native form. Inheritance 
between objects is implemented using prototype-based programming.




It enables us to create objects which can serve as a prototype for other objects being created. The prototype object 
is used as a blueprint for each object the constructor creates.


Example:

    var personPrototype = {
        sayHi: function() {
            console.log("Hello, my name is " + this.name + ", and I am " + this.age);
        },
        sayBye: function() {
            console.log("Bye Bye!");
        }
    };

    function Person(name, age) {
        name = name || "John Doe";
        age = age || 26;

        function constructorFunction(name, age) {
            this.name = name;
            this.age = age;
        };

        constructorFunction.prototype = personPrototype;

        var instance = new constructorFunction(name, age);
        return instance;
    }

    var person1 = Person();
    var person2 = Person("Bob", 38);

    // prints out Hello, my name is John Doe, and I am 26
    person1.sayHi();
    // prints out Hello, my name is Bob, and I am 38
    person2.sayHi();


Take notice how prototype inheritance makes a performance boost as well because both objects contain a 
reference to the functions which are implemented in the prototype itself, instead of in each of the objects.










Command Pattern

The command pattern is useful in cases when we want to decouple objects executing the commands from objects 
issuing the commands. For example, imagine a scenario where our application is using a large number of API 
service calls. Then, let’s say that the API services change. 
**** We would have to modify the code wherever the APIs that changed are called.



This would be a great place to implement an abstraction layer, which would separate the objects calling 
an API service from the objects which are telling them when to call the API service. This way, we avoid 
modification in all of the places where we have a need to call the service, but rather have to change only 
the objects which are making the call itself, which is only one place.





As with any other pattern, we have to know when exactly is there a real need for such a pattern. We need to 
be aware of the tradeoff we are making, as we are adding an additional abstraction layer over the API calls, 
which will reduce performance but potentially save a lot of time when we need to modify objects executing the commands.


Example: 

    // the object which knows how to execute the command
    var invoker = {
        add: function(x, y) {
            return x + y;
        },
        subtract: function(x, y) {
            return x - y;
        }
    }

    // the object which is used as an abstraction layer when
    // executing commands; it represents an interface
    // toward the invoker object
    var manager = {
        execute: function(name, args) {
            if (name in invoker) {
                return invoker[name].apply(invoker, [].slice.call(arguments, 1)); // call slice on 'arguments' with param 1
            }                                                                     // which means get all array from ind 1 to end
            return false;
        }
    }

    // prints 8
    console.log(manager.execute("add", 3, 5));
    // prints 2
    console.log(manager.execute("subtract", 5, 3));











Facade Pattern

The facade pattern is used when we want to create an abstraction layer between what is shown publicly 
and what is implemented behind the curtain. It is used when an easier or simpler interface to an 
underlying object is desired.



A great example of this pattern would be selectors from DOM manipulation libraries such as jQuery, Dojo, or D3. 
You might have noticed using these libraries that they have very powerful selector features; you can write in 
complex queries such as:

jQuery(".parent .child div.span")
It simplifies the selection features a lot, and even though it seems simple on the surface, there is an entire 
complex logic implemented under the hood in order for this to work.

We also need to be aware of the performance-simplicity tradeoff. It is desirable to avoid extra complexity if it 
isn’t beneficial enough. In the case of the aforementioned libraries, the tradeoff was worth it, as they are all 
very successful libraries.











'Call' Function
Method Reuse
With the call() method, you can write a method that can be used on different objects.

The 'this' Keyword
In a function definition, 'this' refers to the "owner" of the function.

In the example above, 'this' is the person object that "owns" the fullName function.

In other words, this.firstName means the firstName property of this object.


'arguments' is an Array-like object accessible inside functions that contains the values of the arguments 
passed to that function.

Example:
    var person = {
        fullName: function() {
            return this.firstName + " " + this.lastName;
        }
    }
    var person1 = {
        firstName:"John",
        lastName: "Doe"
    }
    var person2 = {
        firstName:"Mary",
        lastName: "Doe"
    }

    person.fullName.call(person1);  // Will return "John Doe"


context 'this' will always belong to the corresponding *object* 
-   a function is not considered an object, but if it is used to initialize 
    and object with 'new' then it will have its own context 

Scope exists as local and global
-   is enclose within the function scope 
    They get attached to the context the variable belongs to 
    -   This could be a big reason scope collision can occur in javascript

Context example:

    function F() { this.doSomething('good'); }

    // You can invoke this function in different contexts like this:

    obj1 = { doSomething: function(x) { console.log(x); } }

    obj2 = { doSomething: function(x) { alert(x); } }

    F.call(obj1);
    F.call(obj2);