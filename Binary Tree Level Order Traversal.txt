//First Try:
Total Runtime: 1650 ms
100% test cases passed.


public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: Level order a list of lists of integer
     */
    public ArrayList<ArrayList<Integer>> levelOrder(TreeNode root) {
        ArrayList<ArrayList<Integer>> orders = new ArrayList<ArrayList<Integer>>();
        if(root == null) return orders;
        
        LinkedList<TreeNode> queue = new LinkedList<TreeNode>();
        ArrayList<Integer> level = null;
        queue.add(root);
        
        while(queue.size() > 0){
            level = new ArrayList<Integer>();
            int remove = queue.size();
            while(remove-- > 0){
                TreeNode n = queue.removeFirst();
                level.add(n.val);
                if(n.left != null) queue.addLast(n.left);
                if(n.right != null) queue.addLast(n.right);
            }
            orders.add(level);
        }
        return orders;
    }
}




/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
 
 
public class Solution {
    /**
     * @param root: The root of binary tree.
     * @return: Level order a list of lists of integer
     */
    public ArrayList<ArrayList<Integer>> levelOrder(TreeNode root) {
        ArrayList<ArrayList<Integer>> orders = new ArrayList<ArrayList<Integer>>();
        if(root == null) return orders;
        
        LinkedList<TreeNode> queue = new LinkedList<TreeNode>(), temp = null;
        ArrayList<Integer> level = null;
        queue.add(root);
        
        while(queue.size() > 0){
            temp = new LinkedList<TreeNode>()
            level = new ArrayList<Integer>();
            while(queue.size() > 0){
                TreeNode n = queue.removeFirst();
                level.add(n.val);
                if(n.left != null) temp.addLast(n.left);
                if(n.right != null) temp.addLast(n.right);
            }
            orders.add(level);
            queue = temp;
        }
        return orders;
    }
}