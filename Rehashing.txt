//First Submission: Passed
Total Runtime: 2148 ms
100% test cases passed.


/**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param hashTable: A list of The first node of linked list
     * @return: A list of The first node of linked list which have twice size
     */    
    public ListNode[] rehashing(ListNode[] hashTable) {
        if(hashTable == null) return null;
        ListNode[] nt = new ListNode[hashTable.length*2];
        for(ListNode ln : hashTable){
            while(ln != null){
                int hash = hashcode(ln.val, nt.length);
                if(nt[hash] == null) nt[hash] = new ListNode(ln.val);
                else {
                    ListNode n = new ListNode(ln.val), temp = nt[hash];
                    while(temp.next != null) temp = temp.next;
                    temp.next = n;
                }
                ln = ln.next;
            }
        }
        return nt;
    }
    
    public int hashcode(int key, int capacity){
        return ((key % capacity) + capacity) % capacity;
    }
};
