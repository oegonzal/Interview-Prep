//First Submission sucessful 18/15
Total Runtime: 2145 ms
100% test cases passed.



/**
 * Definition of Interval:
 * public class Interval {
 *     int start, end;
 *     Interval(int start, int end) {
 *         this.start = start;
 *         this.end = end;
 *     }
 */

class Solution {
    /**
     * @param intervals, a collection of intervals
     * @return: A new sorted interval list.
     */
    public List<Interval> merge(List<Interval> intervals) {
        if(intervals == null || intervals.size() == 0) return intervals;
        Collections.sort(intervals, new Comparator<Interval>(){
            @Override
            public int compare(Interval a, Interval b){
                if(a.start < b.start) return -1;
                else if(a.start > b.start) return 1;
                else return 0;
            }
        });
        
        int len = intervals.size();
        for(int i = 0; i+1 < intervals.size();){
            Interval first = intervals.get(i), second = intervals.get(i+1);
            if(areOverlapped(first, second)){
                first.start = Math.min(first.start, second.start);
                first.end = Math.max(first.end, second.end);
                intervals.remove(i+1);
            } else i++;
        }
        return intervals;
    }//18mins
    
    public boolean areOverlapped(Interval a, Interval b){
        if( a.end >= b.start && a.end <= b.end   ||
            a.start >= b.start && a.end <= b.end ||
            a.start <= b.start && a.end >= b.end ||
            a.start <= b.start && a.end >= b.start ) return true;
        return false;
    }
}
//[[1,3],[8,10],[2,6],[15,18],[12,14],[18,21]]